/* eslint-disable */
import * as types from './graphql';
import { TypedDocumentNode as DocumentNode } from '@graphql-typed-document-node/core';

/**
 * Map of all GraphQL operations in the project.
 *
 * This map has several performance disadvantages:
 * 1. It is not tree-shakeable, so it will include all operations in the project.
 * 2. It is not minifiable, so the string of a GraphQL query will be multiple times inside the bundle.
 * 3. It does not support dead code elimination, so it will add unused operations.
 *
 * Therefore it is highly recommended to use the babel or swc plugin for production.
 */
const documents = {
    "\n    mutation updateProfile(\n        $nickname: String,\n        $mutableId: String,\n        $description: String,\n    ) {\n        updateusersCollection(\n            set: {\n                nickname: $nickname,\n                mutable_id: $mutableId,\n                description: $description,\n            }\n        ) {\n            records {\n                id,\n                nickname,\n                mutable_id,\n                description,\n            }\n        }\n    }\n": types.UpdateProfileDocument,
    "\n    fragment ArtistsMinimalInfo on artists {\n        id\n        name\n        updated_at\n    }\n": types.ArtistsMinimalInfoFragmentDoc,
    "\n    fragment ArtistsInfo on artists {\n        ...ArtistsMinimalInfo\n        abstract\n        bio\n        oeuvres_artistsCollection {\n            edges {\n                node {\n                    oeuvres {\n                        ...OeuvresMinimalInfo\n                    }\n                }\n            }\n        }\n    }\n": types.ArtistsInfoFragmentDoc,
    "\n    query getArtistInfoById($id: UUID!) {\n        artistsCollection(\n            filter: { id: { eq: $id } }\n        ) {\n            edges {\n                node {\n                    ...ArtistsInfo\n                }\n            }\n        }\n    }\n": types.GetArtistInfoByIdDocument,
    "\n    fragment GenresMinimalInfo on genres {\n        id\n        name\n        updated_at\n    }\n": types.GenresMinimalInfoFragmentDoc,
    "\n    fragment GenresInfo on genres {\n        ...GenresMinimalInfo,\n        abstract\n        description\n        oeuvres_genresCollection {\n            edges {\n                node {\n                    oeuvres {\n                        ...OeuvresMinimalInfo\n                    }\n                }\n            }\n        }\n    }\n": types.GenresInfoFragmentDoc,
    "\n    query getGenreInfoById($id: UUID!) {\n        genresCollection(\n            filter: { id: { eq: $id } }\n        ) {\n            edges {\n                node {\n                    ...GenresInfo\n                }\n            }\n        }\n    }\n": types.GetGenreInfoByIdDocument,
    "\n    fragment OeuvresMinimalInfo on oeuvres {\n        id\n        title\n        updated_at\n    }\n": types.OeuvresMinimalInfoFragmentDoc,
    "\n    fragment OeuvresInfo on oeuvres {\n        ...OeuvresMinimalInfo\n        description\n        oeuvres_artistsCollection {\n            edges {\n                node {\n                    artists {\n                        ...ArtistsMinimalInfo\n                    }\n                }\n            }\n        },\n        oeuvres_genresCollection {\n            edges {\n                node {\n                    genres {\n                        ...GenresMinimalInfo\n                    }\n                }\n            }\n        }\n    }\n": types.OeuvresInfoFragmentDoc,
    "\n    fragment OeuvresExtensiveInfo on oeuvres {\n        ...OeuvresInfo\n        pentagram_nodesCollection(\n            orderBy: {\n                created_at: DescNullsLast\n            },\n        ) {\n            edges {\n                node {\n                    pentagrams {\n                        ...PentagramsSelectInfo\n                    }\n                }\n            }\n        }\n    }\n": types.OeuvresExtensiveInfoFragmentDoc,
    "\n    query getOeuvreExtensiveInfoById($id: UUID!) {\n        oeuvresCollection(\n            filter: { id: { eq: $id } }\n        ) {\n            edges {\n                node {\n                    ...OeuvresExtensiveInfo\n                }\n            }\n        }\n    }\n": types.GetOeuvreExtensiveInfoByIdDocument,
    "\n    fragment UpdateRecordInfo on pentagram_revision_update_records {\n        id\n        pentagram_nodes {\n            oeuvres {\n                ...OeuvresMinimalInfo\n            }\n        }\n        pentagram_revisions {\n            created_at\n        }\n        current_angle\n        current_distance\n        previous_angle\n        previous_distance\n    }\n": types.UpdateRecordInfoFragmentDoc,
    "\n    fragment UpsertRecordInfo on pentagram_revision_upsert_records {\n        id\n        pentagram_nodes {\n            oeuvres {\n                ...OeuvresMinimalInfo\n            }\n        }\n        pentagram_revisions {\n            created_at\n        }\n        current_angle\n        current_distance\n    }\n": types.UpsertRecordInfoFragmentDoc,
    "  \n    fragment RemoveRecordInfo on pentagram_revision_remove_records {\n        id\n        pentagram_nodes {\n            oeuvres {\n                ...OeuvresMinimalInfo\n            }\n        }\n        pentagram_revisions {\n            created_at\n        }\n        previous_angle\n        previous_distance\n    }\n": types.RemoveRecordInfoFragmentDoc,
    "\n    fragment RecoverRecordInfo on pentagram_revision_recover_records {\n        id\n        pentagram_nodes {\n            oeuvres {\n                ...OeuvresMinimalInfo\n            }\n        }\n        pentagram_revisions {\n            created_at\n        }\n        current_angle\n        current_distance\n    }\n": types.RecoverRecordInfoFragmentDoc,
    "\n    fragment PentagramNodesInfo on pentagram_nodes {\n        id\n        oeuvres {\n            ...OeuvresInfo\n        }\n        pentagram_revision_update_recordsCollection {\n            edges {\n                node {\n                    ...UpdateRecordInfo\n                }\n            }\n        }\n        pentagram_revision_upsert_recordsCollection {\n            edges {\n                node {\n                    ...UpsertRecordInfo\n                }\n            }\n        }\n        pentagram_revision_remove_recordsCollection {\n            edges {\n                node {\n                    ...RemoveRecordInfo\n                }\n            }\n        }\n        pentagram_revision_recover_recordsCollection {\n            edges {\n                node {\n                    ...RecoverRecordInfo\n                }\n            }\n        }\n    }\n": types.PentagramNodesInfoFragmentDoc,
    "\n    fragment PentagramsUpdateInfo on pentagrams {\n        id\n        description\n        created_at\n        users {\n            ...MiniProfileInfo\n        }\n        pentagram_nodesCollection {\n            edges {\n                node {\n                    ...PentagramNodesInfo\n                }\n            }\n        }\n    }\n": types.PentagramsUpdateInfoFragmentDoc,
    "\n    fragment PentagramsSelectInfo on pentagrams {\n        id\n        description\n        created_at\n        users {\n            ...MiniProfileInfo\n        }\n        pentagram_nodesCollection {\n            edges {\n                node {\n                    ...PentagramNodesInfo\n                }\n            }\n        }\n        pentagram_revisionsCollection(\n            orderBy: { created_at: DescNullsLast }\n        ) {\n            edges {\n                node {\n                    ...PentagramRevisionsMinimalInfo\n                }\n            }\n        }\n    }\n": types.PentagramsSelectInfoFragmentDoc,
    "\n    fragment PentagramsSelectUserInfo on pentagrams {\n        id\n        users {\n            ...MiniProfileInfo\n        }\n    }\n": types.PentagramsSelectUserInfoFragmentDoc,
    "\n    fragment PentagramRevisionsInfo on pentagram_revisions {\n        id\n        created_at\n        pentagrams {\n            id\n        }\n        pentagram_revision_update_recordsCollection {\n            totalCount\n            edges {\n                node {\n                    ...UpdateRecordInfo\n                }\n            }\n        }\n        pentagram_revision_upsert_recordsCollection {\n            totalCount\n            edges {\n                node {\n                    ...UpsertRecordInfo\n                }\n            }\n        }\n        pentagram_revision_remove_recordsCollection {\n            totalCount\n            edges {\n                node {\n                    ...RemoveRecordInfo\n                }\n            }\n        }\n        pentagram_revision_recover_recordsCollection {\n            totalCount\n            edges {\n                node {\n                    ...RecoverRecordInfo\n                }\n            }\n        }\n    }\n": types.PentagramRevisionsInfoFragmentDoc,
    "\n    fragment PentagramRevisionsMinimalInfo on pentagram_revisions {\n        id\n        created_at\n        pentagrams {\n            id\n        }\n        pentagram_revision_update_recordsCollection {\n            totalCount\n        }\n        pentagram_revision_upsert_recordsCollection {\n            totalCount\n        }\n        pentagram_revision_remove_recordsCollection {\n            totalCount\n        }\n        pentagram_revision_recover_recordsCollection {\n            totalCount\n        }\n    }\n": types.PentagramRevisionsMinimalInfoFragmentDoc,
    "\n    query getPentagramUpdateInfoById($id: UUID!) {\n        pentagramsCollection(\n            filter: { id: { eq: $id } }\n        ) {\n            edges {\n                node {\n                    ...PentagramsUpdateInfo\n                }\n            }\n        }\n    }\n": types.GetPentagramUpdateInfoByIdDocument,
    "\n    query getPentagramSelectInfoById($id: UUID!) {\n        pentagramsCollection(\n            filter: { id: { eq: $id } }\n        ) {\n            edges {\n                node {\n                    ...PentagramsSelectInfo\n                }\n            }\n        }\n    }\n": types.GetPentagramSelectInfoByIdDocument,
    "\n    query getPentagramsSelectUserInfoById($id: UUID!) {\n        pentagramsCollection(\n            filter: { id: { eq: $id } }\n        ) {\n            edges {\n                node {\n                    ...PentagramsSelectUserInfo\n                }\n            }\n        }\n    }\n": types.GetPentagramsSelectUserInfoByIdDocument,
    "\n    query getPentagramNodesInfoById($id: UUID!) {\n        pentagram_nodesCollection(\n            filter: { id: { eq: $id } }\n        ) {\n            edges {\n                node {\n                    ...PentagramNodesInfo\n                }\n            }\n        }\n    }\n": types.GetPentagramNodesInfoByIdDocument,
    "\n    query getPentagramRevisionsInfoById($id: UUID!) {\n        pentagram_revisionsCollection(\n            filter: { id: { eq: $id } }\n        ) {\n            edges {\n                node {\n                    ...PentagramRevisionsInfo\n                }\n            }\n        }\n    }\n": types.GetPentagramRevisionsInfoByIdDocument,
    "\n    fragment MiniProfileInfo on users {\n        mutable_id,\n        nickname,\n        id,\n        updated_at\n    }\n": types.MiniProfileInfoFragmentDoc,
    "\n    fragment FollowingsMiniProfile on followingsConnection {\n        edges {\n            node {\n                following_id {\n                    ...MiniProfileInfo\n                }\n            }\n        }\n    }\n": types.FollowingsMiniProfileFragmentDoc,
    "\n    fragment FollowersMiniProfile on followingsConnection {\n        edges {\n            node {\n                follower_id {\n                    ...MiniProfileInfo\n                }\n            }\n        }\n    }\n": types.FollowersMiniProfileFragmentDoc,
    "\n    fragment ProfilesInfo on users {\n        ...MiniProfileInfo,\n        description,\n        nickname,\n        followersCollection {\n            ...FollowersMiniProfile\n        },\n        followingsCollection {\n            ...FollowingsMiniProfile\n        }\n        pentagramsCollection(\n            orderBy: {\n                created_at: DescNullsLast\n            }\n        ) {\n            edges {\n                node {\n                    ...PentagramsSelectInfo\n                }\n            }\n        }\n        pentagram_revisionsCollection(\n            orderBy: {\n                created_at: DescNullsLast\n            }\n        ) {\n            edges {\n                node {\n                    ...FeedInfo\n                }\n            }\n        }\n    }\n": types.ProfilesInfoFragmentDoc,
    "\n    mutation insertFollowings($followerId:UUID!, $followingId:UUID!) {\n        insertIntofollowingsCollection(\n            objects: {\n                follower_id: $followerId,\n                following_id: $followingId\n            }\n        ) {\n            records{\n                follower_id { id },\n                follower_id { id }\n            }\n        }\n    }\n": types.InsertFollowingsDocument,
    "\n    mutation deleteFollowings($followerId:UUID!, $followingId:UUID!) {\n        deleteFromfollowingsCollection(\n            filter : {\n                following_id: {eq: $followingId },\n                follower_id: {eq: $followerId}\n            }\n        ) {\n            records {\n                follower_id { id },\n                follower_id { id }\n            }\n        }\n    }\n": types.DeleteFollowingsDocument,
    "\n    mutation insertArtists(\n        $title: String,\n        $abstract : String\n        $description: String,\n    ) {\n        insertIntoartistsCollection(\n            objects: {\n                name: $title,\n                abstract: $abstract,\n                bio: $description,\n            }\n        ) {\n            records {\n                id,\n            }\n        }\n    }\n": types.InsertArtistsDocument,
    "\n    mutation insertOeuvres(\n        $title: String,\n        $description: String,\n    ) {\n        insertIntooeuvresCollection(\n            objects: {\n                title: $title,\n                description: $description,\n            }\n        ) {\n            records {\n                id,\n            }\n        }\n    }\n": types.InsertOeuvresDocument,
    "\n    mutation insertGenres(\n        $title: String,\n        $abstract : String\n        $description: String,\n    ) {\n        insertIntogenresCollection(\n            objects: {\n                name: $title,\n                abstract: $abstract,\n                description: $description\n            }\n        ) {\n            records {\n                id,\n            }\n        }\n    }\n": types.InsertGenresDocument,
    "\n    fragment AuthInfo on users {\n        id,\n        mutable_id,\n        nickname,\n        description,\n        followingsCollection {\n            ...FollowingsMiniProfile\n        },\n    }\n": types.AuthInfoFragmentDoc,
    "\n    query GetUserById($id: UUID!) {\n        usersCollection(filter: { id: {eq: $id } }) {\n            edges {\n                node {\n                    ...AuthInfo\n                }\n            }\n        }\n    }\n": types.GetUserByIdDocument,
    "\n    fragment FeedInfo on pentagram_revisions {\n        id\n        created_at\n        users {\n            ...MiniProfileInfo\n        }\n        pentagrams {\n            ...PentagramsSelectInfo\n        }\n    }\n": types.FeedInfoFragmentDoc,
    "\n    query GetFeedById($id: UUID!) {\n        usersCollection(filter: { id: {eq: $id } }) {\n            edges {\n                node {\n                    id,\n                    feed (orderBy: {\n                        created_at: DescNullsLast\n                    }) {\n                        edges {\n                            node {\n                                ...FeedInfo\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n": types.GetFeedByIdDocument,
    "\n    query GetFollowRecommendation($id: UUID!) {\n        usersCollection(filter: { id: {eq: $id } }) {\n            edges {\n                node {\n                    recommendation {\n                        edges {\n                            node {\n                                ...ProfilesInfo\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n": types.GetFollowRecommendationDocument,
    "\n    query searchOeuvres($keyword: String!) {\n        oeuvresCollection(\n            filter: { title: { ilike: $keyword } }\n        ) {\n            edges {\n                node {\n                    ...OeuvresInfo\n                }\n            }\n        }\n    }\n": types.SearchOeuvresDocument,
    "\n    query searchUsers($keyword: String!) {\n        usersCollection  (\n            filter: { mutable_id: { ilike: $keyword } }\n        ) {\n            edges {\n                node {\n                    ...ProfilesInfo\n                }\n            }\n        }\n    }\n": types.SearchUsersDocument,
    "\n    query searchArtists($keyword: String!) {\n        artistsCollection(\n            filter: { name: { ilike: $keyword } }\n        ) {\n            edges {\n                node {\n                    ...ArtistsInfo\n                }\n            }\n        }\n    }\n": types.SearchArtistsDocument,
    "\n    query searchGenres($keyword: String!) {\n        genresCollection(\n            filter: { name: { ilike: $keyword } }\n        ) {\n            edges {\n                node {\n                    ...GenresInfo\n                }\n            }\n        }\n    }\n": types.SearchGenresDocument,
};

/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 *
 *
 * @example
 * ```ts
 * const query = graphql(`query GetUser($id: ID!) { user(id: $id) { name } }`);
 * ```
 *
 * The query argument is unknown!
 * Please regenerate the types.
 */
export function graphql(source: string): unknown;

/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    mutation updateProfile(\n        $nickname: String,\n        $mutableId: String,\n        $description: String,\n    ) {\n        updateusersCollection(\n            set: {\n                nickname: $nickname,\n                mutable_id: $mutableId,\n                description: $description,\n            }\n        ) {\n            records {\n                id,\n                nickname,\n                mutable_id,\n                description,\n            }\n        }\n    }\n"): (typeof documents)["\n    mutation updateProfile(\n        $nickname: String,\n        $mutableId: String,\n        $description: String,\n    ) {\n        updateusersCollection(\n            set: {\n                nickname: $nickname,\n                mutable_id: $mutableId,\n                description: $description,\n            }\n        ) {\n            records {\n                id,\n                nickname,\n                mutable_id,\n                description,\n            }\n        }\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    fragment ArtistsMinimalInfo on artists {\n        id\n        name\n        updated_at\n    }\n"): (typeof documents)["\n    fragment ArtistsMinimalInfo on artists {\n        id\n        name\n        updated_at\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    fragment ArtistsInfo on artists {\n        ...ArtistsMinimalInfo\n        abstract\n        bio\n        oeuvres_artistsCollection {\n            edges {\n                node {\n                    oeuvres {\n                        ...OeuvresMinimalInfo\n                    }\n                }\n            }\n        }\n    }\n"): (typeof documents)["\n    fragment ArtistsInfo on artists {\n        ...ArtistsMinimalInfo\n        abstract\n        bio\n        oeuvres_artistsCollection {\n            edges {\n                node {\n                    oeuvres {\n                        ...OeuvresMinimalInfo\n                    }\n                }\n            }\n        }\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    query getArtistInfoById($id: UUID!) {\n        artistsCollection(\n            filter: { id: { eq: $id } }\n        ) {\n            edges {\n                node {\n                    ...ArtistsInfo\n                }\n            }\n        }\n    }\n"): (typeof documents)["\n    query getArtistInfoById($id: UUID!) {\n        artistsCollection(\n            filter: { id: { eq: $id } }\n        ) {\n            edges {\n                node {\n                    ...ArtistsInfo\n                }\n            }\n        }\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    fragment GenresMinimalInfo on genres {\n        id\n        name\n        updated_at\n    }\n"): (typeof documents)["\n    fragment GenresMinimalInfo on genres {\n        id\n        name\n        updated_at\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    fragment GenresInfo on genres {\n        ...GenresMinimalInfo,\n        abstract\n        description\n        oeuvres_genresCollection {\n            edges {\n                node {\n                    oeuvres {\n                        ...OeuvresMinimalInfo\n                    }\n                }\n            }\n        }\n    }\n"): (typeof documents)["\n    fragment GenresInfo on genres {\n        ...GenresMinimalInfo,\n        abstract\n        description\n        oeuvres_genresCollection {\n            edges {\n                node {\n                    oeuvres {\n                        ...OeuvresMinimalInfo\n                    }\n                }\n            }\n        }\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    query getGenreInfoById($id: UUID!) {\n        genresCollection(\n            filter: { id: { eq: $id } }\n        ) {\n            edges {\n                node {\n                    ...GenresInfo\n                }\n            }\n        }\n    }\n"): (typeof documents)["\n    query getGenreInfoById($id: UUID!) {\n        genresCollection(\n            filter: { id: { eq: $id } }\n        ) {\n            edges {\n                node {\n                    ...GenresInfo\n                }\n            }\n        }\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    fragment OeuvresMinimalInfo on oeuvres {\n        id\n        title\n        updated_at\n    }\n"): (typeof documents)["\n    fragment OeuvresMinimalInfo on oeuvres {\n        id\n        title\n        updated_at\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    fragment OeuvresInfo on oeuvres {\n        ...OeuvresMinimalInfo\n        description\n        oeuvres_artistsCollection {\n            edges {\n                node {\n                    artists {\n                        ...ArtistsMinimalInfo\n                    }\n                }\n            }\n        },\n        oeuvres_genresCollection {\n            edges {\n                node {\n                    genres {\n                        ...GenresMinimalInfo\n                    }\n                }\n            }\n        }\n    }\n"): (typeof documents)["\n    fragment OeuvresInfo on oeuvres {\n        ...OeuvresMinimalInfo\n        description\n        oeuvres_artistsCollection {\n            edges {\n                node {\n                    artists {\n                        ...ArtistsMinimalInfo\n                    }\n                }\n            }\n        },\n        oeuvres_genresCollection {\n            edges {\n                node {\n                    genres {\n                        ...GenresMinimalInfo\n                    }\n                }\n            }\n        }\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    fragment OeuvresExtensiveInfo on oeuvres {\n        ...OeuvresInfo\n        pentagram_nodesCollection(\n            orderBy: {\n                created_at: DescNullsLast\n            },\n        ) {\n            edges {\n                node {\n                    pentagrams {\n                        ...PentagramsSelectInfo\n                    }\n                }\n            }\n        }\n    }\n"): (typeof documents)["\n    fragment OeuvresExtensiveInfo on oeuvres {\n        ...OeuvresInfo\n        pentagram_nodesCollection(\n            orderBy: {\n                created_at: DescNullsLast\n            },\n        ) {\n            edges {\n                node {\n                    pentagrams {\n                        ...PentagramsSelectInfo\n                    }\n                }\n            }\n        }\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    query getOeuvreExtensiveInfoById($id: UUID!) {\n        oeuvresCollection(\n            filter: { id: { eq: $id } }\n        ) {\n            edges {\n                node {\n                    ...OeuvresExtensiveInfo\n                }\n            }\n        }\n    }\n"): (typeof documents)["\n    query getOeuvreExtensiveInfoById($id: UUID!) {\n        oeuvresCollection(\n            filter: { id: { eq: $id } }\n        ) {\n            edges {\n                node {\n                    ...OeuvresExtensiveInfo\n                }\n            }\n        }\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    fragment UpdateRecordInfo on pentagram_revision_update_records {\n        id\n        pentagram_nodes {\n            oeuvres {\n                ...OeuvresMinimalInfo\n            }\n        }\n        pentagram_revisions {\n            created_at\n        }\n        current_angle\n        current_distance\n        previous_angle\n        previous_distance\n    }\n"): (typeof documents)["\n    fragment UpdateRecordInfo on pentagram_revision_update_records {\n        id\n        pentagram_nodes {\n            oeuvres {\n                ...OeuvresMinimalInfo\n            }\n        }\n        pentagram_revisions {\n            created_at\n        }\n        current_angle\n        current_distance\n        previous_angle\n        previous_distance\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    fragment UpsertRecordInfo on pentagram_revision_upsert_records {\n        id\n        pentagram_nodes {\n            oeuvres {\n                ...OeuvresMinimalInfo\n            }\n        }\n        pentagram_revisions {\n            created_at\n        }\n        current_angle\n        current_distance\n    }\n"): (typeof documents)["\n    fragment UpsertRecordInfo on pentagram_revision_upsert_records {\n        id\n        pentagram_nodes {\n            oeuvres {\n                ...OeuvresMinimalInfo\n            }\n        }\n        pentagram_revisions {\n            created_at\n        }\n        current_angle\n        current_distance\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "  \n    fragment RemoveRecordInfo on pentagram_revision_remove_records {\n        id\n        pentagram_nodes {\n            oeuvres {\n                ...OeuvresMinimalInfo\n            }\n        }\n        pentagram_revisions {\n            created_at\n        }\n        previous_angle\n        previous_distance\n    }\n"): (typeof documents)["  \n    fragment RemoveRecordInfo on pentagram_revision_remove_records {\n        id\n        pentagram_nodes {\n            oeuvres {\n                ...OeuvresMinimalInfo\n            }\n        }\n        pentagram_revisions {\n            created_at\n        }\n        previous_angle\n        previous_distance\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    fragment RecoverRecordInfo on pentagram_revision_recover_records {\n        id\n        pentagram_nodes {\n            oeuvres {\n                ...OeuvresMinimalInfo\n            }\n        }\n        pentagram_revisions {\n            created_at\n        }\n        current_angle\n        current_distance\n    }\n"): (typeof documents)["\n    fragment RecoverRecordInfo on pentagram_revision_recover_records {\n        id\n        pentagram_nodes {\n            oeuvres {\n                ...OeuvresMinimalInfo\n            }\n        }\n        pentagram_revisions {\n            created_at\n        }\n        current_angle\n        current_distance\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    fragment PentagramNodesInfo on pentagram_nodes {\n        id\n        oeuvres {\n            ...OeuvresInfo\n        }\n        pentagram_revision_update_recordsCollection {\n            edges {\n                node {\n                    ...UpdateRecordInfo\n                }\n            }\n        }\n        pentagram_revision_upsert_recordsCollection {\n            edges {\n                node {\n                    ...UpsertRecordInfo\n                }\n            }\n        }\n        pentagram_revision_remove_recordsCollection {\n            edges {\n                node {\n                    ...RemoveRecordInfo\n                }\n            }\n        }\n        pentagram_revision_recover_recordsCollection {\n            edges {\n                node {\n                    ...RecoverRecordInfo\n                }\n            }\n        }\n    }\n"): (typeof documents)["\n    fragment PentagramNodesInfo on pentagram_nodes {\n        id\n        oeuvres {\n            ...OeuvresInfo\n        }\n        pentagram_revision_update_recordsCollection {\n            edges {\n                node {\n                    ...UpdateRecordInfo\n                }\n            }\n        }\n        pentagram_revision_upsert_recordsCollection {\n            edges {\n                node {\n                    ...UpsertRecordInfo\n                }\n            }\n        }\n        pentagram_revision_remove_recordsCollection {\n            edges {\n                node {\n                    ...RemoveRecordInfo\n                }\n            }\n        }\n        pentagram_revision_recover_recordsCollection {\n            edges {\n                node {\n                    ...RecoverRecordInfo\n                }\n            }\n        }\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    fragment PentagramsUpdateInfo on pentagrams {\n        id\n        description\n        created_at\n        users {\n            ...MiniProfileInfo\n        }\n        pentagram_nodesCollection {\n            edges {\n                node {\n                    ...PentagramNodesInfo\n                }\n            }\n        }\n    }\n"): (typeof documents)["\n    fragment PentagramsUpdateInfo on pentagrams {\n        id\n        description\n        created_at\n        users {\n            ...MiniProfileInfo\n        }\n        pentagram_nodesCollection {\n            edges {\n                node {\n                    ...PentagramNodesInfo\n                }\n            }\n        }\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    fragment PentagramsSelectInfo on pentagrams {\n        id\n        description\n        created_at\n        users {\n            ...MiniProfileInfo\n        }\n        pentagram_nodesCollection {\n            edges {\n                node {\n                    ...PentagramNodesInfo\n                }\n            }\n        }\n        pentagram_revisionsCollection(\n            orderBy: { created_at: DescNullsLast }\n        ) {\n            edges {\n                node {\n                    ...PentagramRevisionsMinimalInfo\n                }\n            }\n        }\n    }\n"): (typeof documents)["\n    fragment PentagramsSelectInfo on pentagrams {\n        id\n        description\n        created_at\n        users {\n            ...MiniProfileInfo\n        }\n        pentagram_nodesCollection {\n            edges {\n                node {\n                    ...PentagramNodesInfo\n                }\n            }\n        }\n        pentagram_revisionsCollection(\n            orderBy: { created_at: DescNullsLast }\n        ) {\n            edges {\n                node {\n                    ...PentagramRevisionsMinimalInfo\n                }\n            }\n        }\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    fragment PentagramsSelectUserInfo on pentagrams {\n        id\n        users {\n            ...MiniProfileInfo\n        }\n    }\n"): (typeof documents)["\n    fragment PentagramsSelectUserInfo on pentagrams {\n        id\n        users {\n            ...MiniProfileInfo\n        }\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    fragment PentagramRevisionsInfo on pentagram_revisions {\n        id\n        created_at\n        pentagrams {\n            id\n        }\n        pentagram_revision_update_recordsCollection {\n            totalCount\n            edges {\n                node {\n                    ...UpdateRecordInfo\n                }\n            }\n        }\n        pentagram_revision_upsert_recordsCollection {\n            totalCount\n            edges {\n                node {\n                    ...UpsertRecordInfo\n                }\n            }\n        }\n        pentagram_revision_remove_recordsCollection {\n            totalCount\n            edges {\n                node {\n                    ...RemoveRecordInfo\n                }\n            }\n        }\n        pentagram_revision_recover_recordsCollection {\n            totalCount\n            edges {\n                node {\n                    ...RecoverRecordInfo\n                }\n            }\n        }\n    }\n"): (typeof documents)["\n    fragment PentagramRevisionsInfo on pentagram_revisions {\n        id\n        created_at\n        pentagrams {\n            id\n        }\n        pentagram_revision_update_recordsCollection {\n            totalCount\n            edges {\n                node {\n                    ...UpdateRecordInfo\n                }\n            }\n        }\n        pentagram_revision_upsert_recordsCollection {\n            totalCount\n            edges {\n                node {\n                    ...UpsertRecordInfo\n                }\n            }\n        }\n        pentagram_revision_remove_recordsCollection {\n            totalCount\n            edges {\n                node {\n                    ...RemoveRecordInfo\n                }\n            }\n        }\n        pentagram_revision_recover_recordsCollection {\n            totalCount\n            edges {\n                node {\n                    ...RecoverRecordInfo\n                }\n            }\n        }\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    fragment PentagramRevisionsMinimalInfo on pentagram_revisions {\n        id\n        created_at\n        pentagrams {\n            id\n        }\n        pentagram_revision_update_recordsCollection {\n            totalCount\n        }\n        pentagram_revision_upsert_recordsCollection {\n            totalCount\n        }\n        pentagram_revision_remove_recordsCollection {\n            totalCount\n        }\n        pentagram_revision_recover_recordsCollection {\n            totalCount\n        }\n    }\n"): (typeof documents)["\n    fragment PentagramRevisionsMinimalInfo on pentagram_revisions {\n        id\n        created_at\n        pentagrams {\n            id\n        }\n        pentagram_revision_update_recordsCollection {\n            totalCount\n        }\n        pentagram_revision_upsert_recordsCollection {\n            totalCount\n        }\n        pentagram_revision_remove_recordsCollection {\n            totalCount\n        }\n        pentagram_revision_recover_recordsCollection {\n            totalCount\n        }\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    query getPentagramUpdateInfoById($id: UUID!) {\n        pentagramsCollection(\n            filter: { id: { eq: $id } }\n        ) {\n            edges {\n                node {\n                    ...PentagramsUpdateInfo\n                }\n            }\n        }\n    }\n"): (typeof documents)["\n    query getPentagramUpdateInfoById($id: UUID!) {\n        pentagramsCollection(\n            filter: { id: { eq: $id } }\n        ) {\n            edges {\n                node {\n                    ...PentagramsUpdateInfo\n                }\n            }\n        }\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    query getPentagramSelectInfoById($id: UUID!) {\n        pentagramsCollection(\n            filter: { id: { eq: $id } }\n        ) {\n            edges {\n                node {\n                    ...PentagramsSelectInfo\n                }\n            }\n        }\n    }\n"): (typeof documents)["\n    query getPentagramSelectInfoById($id: UUID!) {\n        pentagramsCollection(\n            filter: { id: { eq: $id } }\n        ) {\n            edges {\n                node {\n                    ...PentagramsSelectInfo\n                }\n            }\n        }\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    query getPentagramsSelectUserInfoById($id: UUID!) {\n        pentagramsCollection(\n            filter: { id: { eq: $id } }\n        ) {\n            edges {\n                node {\n                    ...PentagramsSelectUserInfo\n                }\n            }\n        }\n    }\n"): (typeof documents)["\n    query getPentagramsSelectUserInfoById($id: UUID!) {\n        pentagramsCollection(\n            filter: { id: { eq: $id } }\n        ) {\n            edges {\n                node {\n                    ...PentagramsSelectUserInfo\n                }\n            }\n        }\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    query getPentagramNodesInfoById($id: UUID!) {\n        pentagram_nodesCollection(\n            filter: { id: { eq: $id } }\n        ) {\n            edges {\n                node {\n                    ...PentagramNodesInfo\n                }\n            }\n        }\n    }\n"): (typeof documents)["\n    query getPentagramNodesInfoById($id: UUID!) {\n        pentagram_nodesCollection(\n            filter: { id: { eq: $id } }\n        ) {\n            edges {\n                node {\n                    ...PentagramNodesInfo\n                }\n            }\n        }\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    query getPentagramRevisionsInfoById($id: UUID!) {\n        pentagram_revisionsCollection(\n            filter: { id: { eq: $id } }\n        ) {\n            edges {\n                node {\n                    ...PentagramRevisionsInfo\n                }\n            }\n        }\n    }\n"): (typeof documents)["\n    query getPentagramRevisionsInfoById($id: UUID!) {\n        pentagram_revisionsCollection(\n            filter: { id: { eq: $id } }\n        ) {\n            edges {\n                node {\n                    ...PentagramRevisionsInfo\n                }\n            }\n        }\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    fragment MiniProfileInfo on users {\n        mutable_id,\n        nickname,\n        id,\n        updated_at\n    }\n"): (typeof documents)["\n    fragment MiniProfileInfo on users {\n        mutable_id,\n        nickname,\n        id,\n        updated_at\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    fragment FollowingsMiniProfile on followingsConnection {\n        edges {\n            node {\n                following_id {\n                    ...MiniProfileInfo\n                }\n            }\n        }\n    }\n"): (typeof documents)["\n    fragment FollowingsMiniProfile on followingsConnection {\n        edges {\n            node {\n                following_id {\n                    ...MiniProfileInfo\n                }\n            }\n        }\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    fragment FollowersMiniProfile on followingsConnection {\n        edges {\n            node {\n                follower_id {\n                    ...MiniProfileInfo\n                }\n            }\n        }\n    }\n"): (typeof documents)["\n    fragment FollowersMiniProfile on followingsConnection {\n        edges {\n            node {\n                follower_id {\n                    ...MiniProfileInfo\n                }\n            }\n        }\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    fragment ProfilesInfo on users {\n        ...MiniProfileInfo,\n        description,\n        nickname,\n        followersCollection {\n            ...FollowersMiniProfile\n        },\n        followingsCollection {\n            ...FollowingsMiniProfile\n        }\n        pentagramsCollection(\n            orderBy: {\n                created_at: DescNullsLast\n            }\n        ) {\n            edges {\n                node {\n                    ...PentagramsSelectInfo\n                }\n            }\n        }\n        pentagram_revisionsCollection(\n            orderBy: {\n                created_at: DescNullsLast\n            }\n        ) {\n            edges {\n                node {\n                    ...FeedInfo\n                }\n            }\n        }\n    }\n"): (typeof documents)["\n    fragment ProfilesInfo on users {\n        ...MiniProfileInfo,\n        description,\n        nickname,\n        followersCollection {\n            ...FollowersMiniProfile\n        },\n        followingsCollection {\n            ...FollowingsMiniProfile\n        }\n        pentagramsCollection(\n            orderBy: {\n                created_at: DescNullsLast\n            }\n        ) {\n            edges {\n                node {\n                    ...PentagramsSelectInfo\n                }\n            }\n        }\n        pentagram_revisionsCollection(\n            orderBy: {\n                created_at: DescNullsLast\n            }\n        ) {\n            edges {\n                node {\n                    ...FeedInfo\n                }\n            }\n        }\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    mutation insertFollowings($followerId:UUID!, $followingId:UUID!) {\n        insertIntofollowingsCollection(\n            objects: {\n                follower_id: $followerId,\n                following_id: $followingId\n            }\n        ) {\n            records{\n                follower_id { id },\n                follower_id { id }\n            }\n        }\n    }\n"): (typeof documents)["\n    mutation insertFollowings($followerId:UUID!, $followingId:UUID!) {\n        insertIntofollowingsCollection(\n            objects: {\n                follower_id: $followerId,\n                following_id: $followingId\n            }\n        ) {\n            records{\n                follower_id { id },\n                follower_id { id }\n            }\n        }\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    mutation deleteFollowings($followerId:UUID!, $followingId:UUID!) {\n        deleteFromfollowingsCollection(\n            filter : {\n                following_id: {eq: $followingId },\n                follower_id: {eq: $followerId}\n            }\n        ) {\n            records {\n                follower_id { id },\n                follower_id { id }\n            }\n        }\n    }\n"): (typeof documents)["\n    mutation deleteFollowings($followerId:UUID!, $followingId:UUID!) {\n        deleteFromfollowingsCollection(\n            filter : {\n                following_id: {eq: $followingId },\n                follower_id: {eq: $followerId}\n            }\n        ) {\n            records {\n                follower_id { id },\n                follower_id { id }\n            }\n        }\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    mutation insertArtists(\n        $title: String,\n        $abstract : String\n        $description: String,\n    ) {\n        insertIntoartistsCollection(\n            objects: {\n                name: $title,\n                abstract: $abstract,\n                bio: $description,\n            }\n        ) {\n            records {\n                id,\n            }\n        }\n    }\n"): (typeof documents)["\n    mutation insertArtists(\n        $title: String,\n        $abstract : String\n        $description: String,\n    ) {\n        insertIntoartistsCollection(\n            objects: {\n                name: $title,\n                abstract: $abstract,\n                bio: $description,\n            }\n        ) {\n            records {\n                id,\n            }\n        }\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    mutation insertOeuvres(\n        $title: String,\n        $description: String,\n    ) {\n        insertIntooeuvresCollection(\n            objects: {\n                title: $title,\n                description: $description,\n            }\n        ) {\n            records {\n                id,\n            }\n        }\n    }\n"): (typeof documents)["\n    mutation insertOeuvres(\n        $title: String,\n        $description: String,\n    ) {\n        insertIntooeuvresCollection(\n            objects: {\n                title: $title,\n                description: $description,\n            }\n        ) {\n            records {\n                id,\n            }\n        }\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    mutation insertGenres(\n        $title: String,\n        $abstract : String\n        $description: String,\n    ) {\n        insertIntogenresCollection(\n            objects: {\n                name: $title,\n                abstract: $abstract,\n                description: $description\n            }\n        ) {\n            records {\n                id,\n            }\n        }\n    }\n"): (typeof documents)["\n    mutation insertGenres(\n        $title: String,\n        $abstract : String\n        $description: String,\n    ) {\n        insertIntogenresCollection(\n            objects: {\n                name: $title,\n                abstract: $abstract,\n                description: $description\n            }\n        ) {\n            records {\n                id,\n            }\n        }\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    fragment AuthInfo on users {\n        id,\n        mutable_id,\n        nickname,\n        description,\n        followingsCollection {\n            ...FollowingsMiniProfile\n        },\n    }\n"): (typeof documents)["\n    fragment AuthInfo on users {\n        id,\n        mutable_id,\n        nickname,\n        description,\n        followingsCollection {\n            ...FollowingsMiniProfile\n        },\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    query GetUserById($id: UUID!) {\n        usersCollection(filter: { id: {eq: $id } }) {\n            edges {\n                node {\n                    ...AuthInfo\n                }\n            }\n        }\n    }\n"): (typeof documents)["\n    query GetUserById($id: UUID!) {\n        usersCollection(filter: { id: {eq: $id } }) {\n            edges {\n                node {\n                    ...AuthInfo\n                }\n            }\n        }\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    fragment FeedInfo on pentagram_revisions {\n        id\n        created_at\n        users {\n            ...MiniProfileInfo\n        }\n        pentagrams {\n            ...PentagramsSelectInfo\n        }\n    }\n"): (typeof documents)["\n    fragment FeedInfo on pentagram_revisions {\n        id\n        created_at\n        users {\n            ...MiniProfileInfo\n        }\n        pentagrams {\n            ...PentagramsSelectInfo\n        }\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    query GetFeedById($id: UUID!) {\n        usersCollection(filter: { id: {eq: $id } }) {\n            edges {\n                node {\n                    id,\n                    feed (orderBy: {\n                        created_at: DescNullsLast\n                    }) {\n                        edges {\n                            node {\n                                ...FeedInfo\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n"): (typeof documents)["\n    query GetFeedById($id: UUID!) {\n        usersCollection(filter: { id: {eq: $id } }) {\n            edges {\n                node {\n                    id,\n                    feed (orderBy: {\n                        created_at: DescNullsLast\n                    }) {\n                        edges {\n                            node {\n                                ...FeedInfo\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    query GetFollowRecommendation($id: UUID!) {\n        usersCollection(filter: { id: {eq: $id } }) {\n            edges {\n                node {\n                    recommendation {\n                        edges {\n                            node {\n                                ...ProfilesInfo\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n"): (typeof documents)["\n    query GetFollowRecommendation($id: UUID!) {\n        usersCollection(filter: { id: {eq: $id } }) {\n            edges {\n                node {\n                    recommendation {\n                        edges {\n                            node {\n                                ...ProfilesInfo\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    query searchOeuvres($keyword: String!) {\n        oeuvresCollection(\n            filter: { title: { ilike: $keyword } }\n        ) {\n            edges {\n                node {\n                    ...OeuvresInfo\n                }\n            }\n        }\n    }\n"): (typeof documents)["\n    query searchOeuvres($keyword: String!) {\n        oeuvresCollection(\n            filter: { title: { ilike: $keyword } }\n        ) {\n            edges {\n                node {\n                    ...OeuvresInfo\n                }\n            }\n        }\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    query searchUsers($keyword: String!) {\n        usersCollection  (\n            filter: { mutable_id: { ilike: $keyword } }\n        ) {\n            edges {\n                node {\n                    ...ProfilesInfo\n                }\n            }\n        }\n    }\n"): (typeof documents)["\n    query searchUsers($keyword: String!) {\n        usersCollection  (\n            filter: { mutable_id: { ilike: $keyword } }\n        ) {\n            edges {\n                node {\n                    ...ProfilesInfo\n                }\n            }\n        }\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    query searchArtists($keyword: String!) {\n        artistsCollection(\n            filter: { name: { ilike: $keyword } }\n        ) {\n            edges {\n                node {\n                    ...ArtistsInfo\n                }\n            }\n        }\n    }\n"): (typeof documents)["\n    query searchArtists($keyword: String!) {\n        artistsCollection(\n            filter: { name: { ilike: $keyword } }\n        ) {\n            edges {\n                node {\n                    ...ArtistsInfo\n                }\n            }\n        }\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    query searchGenres($keyword: String!) {\n        genresCollection(\n            filter: { name: { ilike: $keyword } }\n        ) {\n            edges {\n                node {\n                    ...GenresInfo\n                }\n            }\n        }\n    }\n"): (typeof documents)["\n    query searchGenres($keyword: String!) {\n        genresCollection(\n            filter: { name: { ilike: $keyword } }\n        ) {\n            edges {\n                node {\n                    ...GenresInfo\n                }\n            }\n        }\n    }\n"];

export function graphql(source: string) {
  return (documents as any)[source] ?? {};
}

export type DocumentType<TDocumentNode extends DocumentNode<any, any>> = TDocumentNode extends DocumentNode<  infer TType,  any>  ? TType  : never;