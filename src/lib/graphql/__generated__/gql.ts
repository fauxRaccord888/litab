/* eslint-disable */
import * as types from './graphql';
import { TypedDocumentNode as DocumentNode } from '@graphql-typed-document-node/core';

/**
 * Map of all GraphQL operations in the project.
 *
 * This map has several performance disadvantages:
 * 1. It is not tree-shakeable, so it will include all operations in the project.
 * 2. It is not minifiable, so the string of a GraphQL query will be multiple times inside the bundle.
 * 3. It does not support dead code elimination, so it will add unused operations.
 *
 * Therefore it is highly recommended to use the babel or swc plugin for production.
 */
const documents = {
    "\n    mutation updateProfile(\n        $nickname: String,\n        $mutableId: String,\n        $description: String,\n    ) {\n        updateUsersCollection(\n            set: {\n                nickname: $nickname,\n                mutableId: $mutableId,\n                description: $description,\n            }\n        ) {\n            records {\n                id,\n                nickname,\n                mutableId,\n                description,\n            }\n        }\n    }\n": types.UpdateProfileDocument,
    "\n    fragment ArtistsMinimalInfo on Artists {\n        id\n        name\n        updatedAt\n    }\n": types.ArtistsMinimalInfoFragmentDoc,
    "\n    fragment ArtistOeuvresInfo on Artists {\n        oeuvresArtistsCollection(\n            orderBy: {\n                oeuvreId: DescNullsLast\n            }\n            first: $limit\n            after: $cursor\n        ) {\n          \tpageInfo {\n                hasNextPage\n                endCursor\n            }\n            edges {\n                cursor\n                node {\n                    oeuvre {\n                        ...OeuvresMinimalInfo\n                    }\n                }\n            }\n        }\n    }\n": types.ArtistOeuvresInfoFragmentDoc,
    "\n    fragment ArtistsInfo on Artists {\n        ...ArtistsMinimalInfo\n        ...ArtistOeuvresInfo\n        abstract\n        bio\n    }\n": types.ArtistsInfoFragmentDoc,
    "\n    query getArtistInfoById(\n        $id: UUID!\n        $limit: Int,\n        $cursor: Cursor        \n    ) {\n        artistsCollection(\n            first: 1,\n            filter: { id: { eq: $id } }\n        ) {\n            edges {\n                node {\n                    ...ArtistsInfo\n                }\n            }\n        }\n    }\n": types.GetArtistInfoByIdDocument,
    "\n    fragment GenresMinimalInfo on Genres {\n        id\n        name\n        updatedAt\n    }\n": types.GenresMinimalInfoFragmentDoc,
    "\n    fragment GenreOeuvresInfo on Genres {\n        oeuvresGenresCollection(\n            orderBy: {\n                oeuvreId: DescNullsLast\n            }\n            first: $limit\n            after: $cursor\n        ) {\n          \tpageInfo {\n                hasNextPage\n                endCursor\n            }\n            edges {\n                cursor\n                node {\n                    oeuvre {\n                        ...OeuvresMinimalInfo\n                    }\n                }\n            }\n        }\n    }\n": types.GenreOeuvresInfoFragmentDoc,
    "\n    fragment GenresInfo on Genres {\n        ...GenresMinimalInfo,\n        ...GenreOeuvresInfo,\n        abstract\n        description\n    }\n": types.GenresInfoFragmentDoc,
    "\n    query getGenreInfoById(\n        $id: UUID!\n        $limit: Int,\n        $cursor: Cursor    \n    ) {\n        genresCollection(\n            first: 1,\n            filter: { id: { eq: $id } }\n        ) {\n            edges {\n                node {\n                    ...GenresInfo\n                }\n            }\n        }\n    }\n": types.GetGenreInfoByIdDocument,
    "\n    fragment InventoryInfo on Users {\n        id,\n        ...InventoryShadowsInfo\n        ...InventoryWorleyInfo\n        ...InventoryCosmosInfo\n    }\n": types.InventoryInfoFragmentDoc,
    "\n    fragment InventoryShadowsInfo on Users {\n        shadowsCollection(\n            orderBy: {\n                createdAt: DescNullsLast\n            }\n            first: $shadowLimit\n            after: $shadowCursor\n        ) {\n            pageInfo {\n                hasNextPage\n                endCursor\n            }\n            edges {\n                cursor\n                node {\n                    ...ShadowsMinimalInfo\n                }\n            }\n        }\n    }\n": types.InventoryShadowsInfoFragmentDoc,
    "\n    fragment InventoryWorleyInfo on Users {\n        worleyCollection(\n            orderBy: {\n                createdAt: DescNullsLast\n            }\n            first: $worleyLimit\n            after: $worleyCursor\n        ) {\n            pageInfo {\n                hasNextPage\n                endCursor\n            }\n            edges {\n                cursor\n                node {\n                    ...WorleyMinimalInfo\n                }\n            }\n        }\n    }\n": types.InventoryWorleyInfoFragmentDoc,
    "\n    fragment InventoryCosmosInfo on Users {\n        cosmosCollection(\n            orderBy: {\n                createdAt: DescNullsLast\n            }\n            first: $cosmosLimit\n            after: $cosmosCursor\n        ) {\n            pageInfo {\n                hasNextPage\n                endCursor\n            }\n            edges {\n                cursor\n                node {\n                    ...CosmosMinimalInfo\n                }\n            }\n        }\n    }\n": types.InventoryCosmosInfoFragmentDoc,
    "\n    fragment ShadowsMinimalInfo on Shadows {\n        id,\n        userId\n        name,\n        color\n        bodyLength\n        centeringFactor\n        matchingFactor\n        minDistance\n        avoidFactor\n        turnFactor\n        visualRange\n        speedLimit\n    }\n": types.ShadowsMinimalInfoFragmentDoc,
    "\n    fragment CosmosMinimalInfo on Cosmos {\n        id,\n        userId\n        name,\n        shootingStarCount,\n        shootingStarColors,\n        starCount,\n        speedParam,\n        sizeParam\n    }\n": types.CosmosMinimalInfoFragmentDoc,
    "\n    fragment WorleyMinimalInfo on Worley {\n        id,\n        userId\n        name,\n        color,\n        gridCount,\n        limit,\n        movementParam\n    }\n": types.WorleyMinimalInfoFragmentDoc,
    "\n    mutation insertCosmos(\n        $userId: UUID,\n        $name: String,\n        $shootingStarColors: [String]\n        $starCount: Int,\n        $shootingStarCount: Int\n        $speedParam: Float,\n        $sizeParam: Float,\n    ) {\n        insertIntoCosmosCollection(\n            objects: {\n                userId: $userId\n                name: $name\n                shootingStarColors: $shootingStarColors\n                shootingStarCount: $shootingStarCount\n                starCount: $starCount\n                speedParam: $speedParam\n                sizeParam: $sizeParam\n            }\n        ) {\n            records {\n                ...CosmosMinimalInfo\n            }\n        }\n    }\n": types.InsertCosmosDocument,
    "\n    mutation deleteCosmos(\n        $id: UUID,\n    ) {\n        deleteFromCosmosCollection(\n            filter: {\n                id: { eq: $id}\n            }\n        ) {\n            records {\n                ...CosmosMinimalInfo\n            }\n        }\n    }\n": types.DeleteCosmosDocument,
    "\n    mutation renameCosmos(\n        $id: UUID,\n        $name: String\n    ) {\n        updateCosmosCollection(\n            filter: {\n                id: { eq: $id}\n            },\n            set: {\n                name: $name\n            }\n        ) {\n            records {\n                ...CosmosMinimalInfo\n            }\n        }\n    }\n": types.RenameCosmosDocument,
    "\n    mutation insertShadows(\n        $userId: UUID,\n        $name: String,\n        $color: String\n        $bodyLength: Float,\n        $centeringFactor: Float,\n        $matchingFactor: Float,\n        $minDistance: Float,\n        $avoidFactor: Float,\n        $turnFactor: Float,\n        $visualRange: Float,\n        $speedLimit: Float\n    ) {\n        insertIntoShadowsCollection(\n            objects: {\n                userId: $userId\n                name: $name\n                color: $color\n                bodyLength: $bodyLength\n                centeringFactor: $centeringFactor\n                matchingFactor: $matchingFactor\n                minDistance: $minDistance\n                avoidFactor: $avoidFactor\n                turnFactor: $turnFactor\n                visualRange: $visualRange\n                speedLimit: $speedLimit\n            }\n        ) {\n            records {\n                ...ShadowsMinimalInfo\n            }\n        }\n    }\n": types.InsertShadowsDocument,
    "\n    mutation deleteShadows(\n        $id: UUID,\n    ) {\n        deleteFromShadowsCollection(\n            filter: {\n                id: { eq: $id}\n            }\n        ) {\n            records {\n                ...ShadowsMinimalInfo\n            }\n        }\n    }\n": types.DeleteShadowsDocument,
    "\n    mutation renameShadows(\n        $id: UUID,\n        $name: String\n    ) {\n        updateShadowsCollection(\n            filter: {\n                id: { eq: $id}\n            },\n            set: {\n                name: $name\n            }\n        ) {\n            records {\n                ...ShadowsMinimalInfo\n            }\n        }\n    }\n": types.RenameShadowsDocument,
    "\n    mutation insertWorley(\n        $userId: UUID,\n        $name: String,\n        $color: String\n        $gridCount: Int,\n        $movementParam: Float,\n        $limit: Int\n    ) {\n        insertIntoWorleyCollection(\n            objects: {\n                userId: $userId\n                name: $name\n                color: $color\n                gridCount: $gridCount,\n                movementParam: $movementParam,\n                limit: $limit\n            }\n        ) {\n            records {\n                ...WorleyMinimalInfo\n            }\n        }\n    }\n": types.InsertWorleyDocument,
    "\n    mutation deleteWorley(\n        $id: UUID,\n    ) {\n        deleteFromWorleyCollection(\n            filter: {\n                id: { eq: $id}\n            }\n        ) {\n            records {\n                ...WorleyMinimalInfo\n            }\n        }\n    }\n": types.DeleteWorleyDocument,
    "\n    mutation renameWorley(\n        $id: UUID,\n        $name: String\n    ) {\n        updateWorleyCollection(\n            filter: {\n                id: { eq: $id}\n            },\n            set: {\n                name: $name\n            }\n        ) {\n            records {\n                ...WorleyMinimalInfo\n            }\n        }\n    }\n": types.RenameWorleyDocument,
    "\n    query getUserInventoryById(\n        $id: UUID!\n        $shadowLimit: Int,\n        $shadowCursor: Cursor\n        $cosmosLimit: Int,\n        $cosmosCursor: Cursor\n        $worleyLimit: Int,\n        $worleyCursor: Cursor\n    ) {\n        usersCollection(\n            first: 1\n            filter: { \n                id: { eq: $id },\n            }\n        ) {\n            edges {\n                node {\n                    ...InventoryInfo\n                }\n            }\n        }\n    }\n": types.GetUserInventoryByIdDocument,
    "\n    fragment OeuvresMinimalInfo on Oeuvres {\n        id\n        title\n        updatedAt\n    }\n": types.OeuvresMinimalInfoFragmentDoc,
    "\n      fragment OeuvrePentagramsInfo on Oeuvres {\n        pentagramNodesCollection(\n            orderBy: {\n                createdAt: DescNullsLast\n            }\n            first: $limit\n            after: $cursor\n        ) {\n          \tpageInfo {\n                hasNextPage\n                endCursor\n            }\n            edges {\n              \tcursor\n                node {\n                    pentagram {\n                        ...PentagramsSelectInfo\n                    }\n                }\n            }\n        }\n    }\n": types.OeuvrePentagramsInfoFragmentDoc,
    "\n    fragment OeuvresInfo on Oeuvres {\n        ...OeuvresMinimalInfo\n        ...OeuvrePentagramsInfo\n        description\n        oeuvresArtistsCollection {\n            edges {\n                node {\n                    artist {\n                        ...ArtistsMinimalInfo\n                    }\n                }\n            }\n        },\n        oeuvresGenresCollection {\n            edges {\n                node {\n                    genre {\n                        ...GenresMinimalInfo\n                    }\n                }\n            }\n        }\n    }\n": types.OeuvresInfoFragmentDoc,
    "\n    query getOeuvreInfoById(\n        $id: UUID!\n        $limit: Int,\n        $cursor: Cursor\n    ) {\n        oeuvresCollection(\n            first: 1,\n            filter: { id: { eq: $id } }\n        ) {\n            edges {\n                node {\n                    ...OeuvresInfo\n                }\n            }\n        }\n    }\n": types.GetOeuvreInfoByIdDocument,
    "\n    fragment UpdateRecordInfo on PentagramRevisionUpdateRecords {\n        id\n        pentagramNode {\n            oeuvre {\n                ...OeuvresMinimalInfo\n            }\n        }\n        revision {\n            createdAt\n        }\n        currentAngle\n        currentDistance\n        previousAngle\n        previousDistance\n    }\n": types.UpdateRecordInfoFragmentDoc,
    "\n    fragment UpsertRecordInfo on PentagramRevisionUpsertRecords {\n        id\n        pentagramNode {\n            oeuvre {\n                ...OeuvresMinimalInfo\n            }\n        }\n        revision {\n            createdAt\n        }\n        currentAngle\n        currentDistance\n    }\n": types.UpsertRecordInfoFragmentDoc,
    "  \n    fragment RemoveRecordInfo on PentagramRevisionRemoveRecords {\n        id\n        pentagramNode {\n            oeuvre {\n                ...OeuvresMinimalInfo\n            }\n        }\n        revision {\n            createdAt\n        }\n        previousAngle\n        previousDistance\n    }\n": types.RemoveRecordInfoFragmentDoc,
    "\n    fragment RecoverRecordInfo on PentagramRevisionRecoverRecords {\n        id\n        pentagramNode {\n            oeuvre {\n                ...OeuvresMinimalInfo\n            }\n        }\n        revision {\n            createdAt\n        }\n        currentAngle\n        currentDistance\n    }\n": types.RecoverRecordInfoFragmentDoc,
    "\n    fragment PentagramNodesInfo on PentagramNodes {\n        id\n        oeuvre {\n            ...OeuvresMinimalInfo\n        }\n        pentagramRevisionUpdateRecordsCollection {\n            edges {\n                node {\n                    ...UpdateRecordInfo\n                }\n            }\n        }\n        pentagramRevisionUpsertRecordsCollection {\n            edges {\n                node {\n                    ...UpsertRecordInfo\n                }\n            }\n        }\n        pentagramRevisionRemoveRecordsCollection {\n            edges {\n                node {\n                    ...RemoveRecordInfo\n                }\n            }\n        }\n        pentagramRevisionRecoverRecordsCollection {\n            edges {\n                node {\n                    ...RecoverRecordInfo\n                }\n            }\n        }\n    }\n": types.PentagramNodesInfoFragmentDoc,
    "\n    fragment PentagramsUpdateInfo on Pentagrams {\n        id\n        description\n        createdAt\n        user {\n            ...MiniProfileInfo\n        }\n        pentagramNodesCollection {\n            edges {\n                node {\n                    ...PentagramNodesInfo\n                }\n            }\n        }\n    }\n": types.PentagramsUpdateInfoFragmentDoc,
    "\n    fragment PentagramsSelectInfo on Pentagrams {\n        id\n        description\n        createdAt\n        user {\n            ...MiniProfileInfo\n        }\n        pentagramNodesCollection {\n            edges {\n                node {\n                    ...PentagramNodesInfo\n                }\n            }\n        }\n        pentagramRevisionsCollection(\n            orderBy: { createdAt: DescNullsLast }\n        ) {\n            edges {\n                node {\n                    ...PentagramRevisionsMinimalInfo\n                }\n            }\n        }\n    }\n": types.PentagramsSelectInfoFragmentDoc,
    "\n    fragment PentagramsSelectUserInfo on Pentagrams {\n        id\n        user {\n            ...MiniProfileInfo\n        }\n    }\n": types.PentagramsSelectUserInfoFragmentDoc,
    "\n    fragment PentagramRevisionsInfo on PentagramRevisions {\n        id\n        createdAt\n        pentagram {\n            id\n        }\n        pentagramRevisionUpdateRecordsCollection {\n            totalCount\n            edges {\n                node {\n                    ...UpdateRecordInfo\n                }\n            }\n        }\n        pentagramRevisionUpsertRecordsCollection {\n            totalCount\n            edges {\n                node {\n                    ...UpsertRecordInfo\n                }\n            }\n        }\n        pentagramRevisionRemoveRecordsCollection {\n            totalCount\n            edges {\n                node {\n                    ...RemoveRecordInfo\n                }\n            }\n        }\n        pentagramRevisionRecoverRecordsCollection {\n            totalCount\n            edges {\n                node {\n                    ...RecoverRecordInfo\n                }\n            }\n        }\n    }\n": types.PentagramRevisionsInfoFragmentDoc,
    "\n    fragment PentagramRevisionsMinimalInfo on PentagramRevisions {\n        id\n        createdAt\n        pentagram {\n            id\n        }\n        pentagramRevisionUpdateRecordsCollection {\n            totalCount\n        }\n        pentagramRevisionUpsertRecordsCollection {\n            totalCount\n        }\n        pentagramRevisionRemoveRecordsCollection {\n            totalCount\n        }\n        pentagramRevisionRecoverRecordsCollection {\n            totalCount\n        }\n    }\n": types.PentagramRevisionsMinimalInfoFragmentDoc,
    "\n    fragment PentagramRevisionFeedInfo on PentagramRevisions {\n        id\n        createdAt\n        user {\n            ...MiniProfileInfo\n        }\n        pentagram {\n            ...PentagramsSelectInfo\n        }\n    }\n": types.PentagramRevisionFeedInfoFragmentDoc,
    "\n    mutation deletePentagram(\n        $id: UUID,\n    ) {\n        deleteFromPentagramsCollection(\n            filter: {\n                id: { eq: $id }\n            }\n        ) {\n            records {\n                id,\n            }\n        }\n    }\n": types.DeletePentagramDocument,
    "\n    query getPentagramUpdateInfoById($id: UUID!) {\n        pentagramsCollection(\n            filter: { id: { eq: $id } }\n        ) {\n            edges {\n                node {\n                    ...PentagramsUpdateInfo\n                }\n            }\n        }\n    }\n": types.GetPentagramUpdateInfoByIdDocument,
    "\n    query getPentagramSelectInfoById($id: UUID!) {\n        pentagramsCollection(\n            filter: { id: { eq: $id } }\n        ) {\n            edges {\n                node {\n                    ...PentagramsSelectInfo\n                }\n            }\n        }\n    }\n": types.GetPentagramSelectInfoByIdDocument,
    "\n    query getPentagramsSelectUserInfoById($id: UUID!) {\n        pentagramsCollection(\n            filter: { id: { eq: $id } }\n        ) {\n            edges {\n                node {\n                    ...PentagramsSelectUserInfo\n                }\n            }\n        }\n    }\n": types.GetPentagramsSelectUserInfoByIdDocument,
    "\n    query getPentagramNodesInfoById($id: UUID!) {\n        pentagramNodesCollection(\n            filter: { id: { eq: $id } }\n        ) {\n            edges {\n                node {\n                    ...PentagramNodesInfo\n                }\n            }\n        }\n    }\n": types.GetPentagramNodesInfoByIdDocument,
    "\n    query getPentagramRevisionsInfoById($id: UUID!) {\n        pentagramRevisionsCollection(\n            filter: { id: { eq: $id } }\n        ) {\n            edges {\n                node {\n                    ...PentagramRevisionsInfo\n                }\n            }\n        }\n    }\n": types.GetPentagramRevisionsInfoByIdDocument,
    "\n    fragment MiniProfileInfo on Users {\n        mutableId,\n        nickname,\n        id,\n        updatedAt\n    }\n": types.MiniProfileInfoFragmentDoc,
    "\n    fragment ProfilesInfo on Users {\n        ...MiniProfileInfo,\n        description,\n        nickname,\n        ...ProfileFollowInfo,\n        ...ProfilePentagramInfo,\n        ...ProfileRevisionInfo\n    }\n": types.ProfilesInfoFragmentDoc,
    "\n    fragment ProfileFollowInfo on Users {\n        followingsCollection {\n            edges {\n                node {\n                    following_id {\n                        ...MiniProfileInfo\n                    }\n                }\n            }\n        }\n        followersCollection {\n            edges {\n                node {\n                    follower_id {\n                        ...MiniProfileInfo\n                    }\n                }\n            }\n        }\n    }\n": types.ProfileFollowInfoFragmentDoc,
    "\n    fragment ProfilePentagramInfo on Users {\n        pentagramsCollection(\n            orderBy: {\n                createdAt: DescNullsLast\n            }\n            first: $pentagramLimit\n            after: $pentagramCursor\n        ) {\n            pageInfo {\n                hasNextPage\n                endCursor\n            }\n            edges {\n                cursor\n                node {\n                    ...PentagramsSelectInfo\n                }\n            }\n        }\n    }\n": types.ProfilePentagramInfoFragmentDoc,
    "\n    fragment ProfileRevisionInfo on Users {\n        pentagramRevisionsCollection(\n            orderBy: {\n                createdAt: DescNullsLast\n            }\n            first: $revisionLimit\n            after: $revisionCursor\n        ) {\n            pageInfo {\n                hasNextPage\n                endCursor\n            }\n            edges {\n                cursor\n                node {\n                    ...PentagramRevisionFeedInfo\n                }\n            }\n        }\n    }\n": types.ProfileRevisionInfoFragmentDoc,
    "\n    mutation insertFollowings($followerId:UUID!, $followingId:UUID!) {\n        insertIntoFollowingsCollection(\n            objects: {\n                followerId: $followerId,\n                followingId: $followingId\n            }\n        ) {\n            records{\n                followerId,\n                followingId\n            }\n        }\n    }\n": types.InsertFollowingsDocument,
    "\n    mutation deleteFollowings($followerId:UUID!, $followingId:UUID!) {\n        deleteFromFollowingsCollection(\n            filter : {\n                followingId: {eq: $followingId },\n                followerId: {eq: $followerId}\n            }\n        ) {\n            records {\n                followerId,\n                followingId\n            }\n        }\n    }\n": types.DeleteFollowingsDocument,
    "\n    query getUserByMutableId(\n        $mutableId: String!\n        $pentagramLimit: Int,\n        $pentagramCursor: Cursor\n        $revisionLimit: Int,\n        $revisionCursor: Cursor\n    ) {\n        usersCollection  (\n            first: 1\n            filter: { mutableId: { eq: $mutableId } }\n        ) {\n            edges {\n                node {\n                    ...ProfilesInfo\n                }\n            }\n        }\n    }\n": types.GetUserByMutableIdDocument,
    "\n    fragment AuthInfo on Users {\n        ...MiniProfileInfo,\n        description,\n        nickname,\n        ...ProfileFollowInfo,\n    }\n": types.AuthInfoFragmentDoc,
    "\n    query GetUserById($id: UUID!) {\n        usersCollection(\n            filter: { id: {eq: $id } }\n            first: 1    \n        ) {\n            edges {\n                node {\n                    ...AuthInfo\n                }\n            }\n        }\n    }\n": types.GetUserByIdDocument,
    "\n    fragment FeedInfo on Feed {\n        items (\n            orderBy: {\n                createdAt: DescNullsLast\n            }\n            first: $limit\n            after: $cursor\n        ) {\n            pageInfo {\n                hasNextPage\n                endCursor\n            }\n            edges {\n              \tcursor\n                node {\n                    ...PentagramRevisionFeedInfo\n                }\n            }\n        }\n    }\n": types.FeedInfoFragmentDoc,
    "\n    fragment FollowRecommendationInfo on Feed {\n        recommendation {\n            edges {\n                node {\n                    ...MiniProfileInfo\n                }\n            }\n        }\n    }\n": types.FollowRecommendationInfoFragmentDoc,
    "\n    query GetFeedById(\n        $id: UUID!,\n        $limit: Int,\n        $cursor: Cursor\n    ) {\n        feedCollection(filter: { id: {eq: $id } }) {\n            edges {\n                node {\n                    id,\n                    ...FeedInfo\n                }\n            }\n        }\n    }\n": types.GetFeedByIdDocument,
    "\n    query GetFollowRecommendation($id: UUID!) {\n        feedCollection(filter: { id: {eq: $id } }) {\n            edges {\n                node {\n                    ...FollowRecommendationInfo\n                }\n            }\n        }\n    }\n": types.GetFollowRecommendationDocument,
    "\n    mutation insertArtists(\n        $title: String,\n        $description: String,\n    ) {\n        insertIntoArtistsCollection(\n            objects: {\n                name: $title,\n                bio: $description,\n            }\n        ) {\n            records {\n                id,\n            }\n        }\n    }\n": types.InsertArtistsDocument,
    "\n    mutation insertOeuvres(\n        $title: String,\n        $description: String,\n    ) {\n        insertIntoOeuvresCollection(\n            objects: {\n                title: $title,\n                description: $description,\n            }\n        ) {\n            records {\n                id,\n            }\n        }\n    }\n": types.InsertOeuvresDocument,
    "\n    mutation insertGenres(\n        $title: String,\n        $description: String,\n    ) {\n        insertIntoGenresCollection(\n            objects: {\n                name: $title,\n                description: $description\n            }\n        ) {\n            records {\n                id,\n            }\n        }\n    }\n": types.InsertGenresDocument,
    "\n    mutation insertOeuvresArtistsRelation(\n        $metaId: UUID,\n        $oeuvreId: UUID,\n    ) {\n        insertIntoOeuvresArtistsCollection(\n            objects: {\n                oeuvreId: $oeuvreId,\n                artistId: $metaId,\n            }\n        ) {\n            records {\n                oeuvreId\n            }\n        }\n    }\n": types.InsertOeuvresArtistsRelationDocument,
    "\n    mutation insertOeuvresGenresRelation(\n        $metaId: UUID,\n        $oeuvreId: UUID,\n    ) {\n        insertIntoOeuvresGenresCollection(\n            objects: {\n                oeuvreId: $oeuvreId,\n                genreId: $metaId,\n            }\n        ) {\n            records {\n                oeuvreId\n            }\n        }\n    }\n": types.InsertOeuvresGenresRelationDocument,
    "\n    mutation deleteOeuvresArtistsRelation(\n        $metaId: UUID,\n        $oeuvreId: UUID,\n    ) {\n        deleteFromOeuvresArtistsCollection(\n            filter: {\n                oeuvreId: { eq: $oeuvreId },\n                artistId: { eq: $metaId },\n            }\n        ) {\n            records {\n                oeuvreId\n            }\n        }\n    }\n": types.DeleteOeuvresArtistsRelationDocument,
    "\n    mutation deleteOeuvresGenresRelation(\n        $metaId: UUID,\n        $oeuvreId: UUID,\n    ) {\n        deleteFromOeuvresGenresCollection(\n            filter: {\n                oeuvreId: { eq: $oeuvreId },\n                genreId: { eq: $metaId },\n            }\n        ) {\n            records {\n                oeuvreId\n            }\n        }\n    }\n": types.DeleteOeuvresGenresRelationDocument,
    "\n    mutation updateArtists(\n        $id: UUID,\n        $title: String,\n        $description: String,\n    ) {\n        updateArtistsCollection(\n          \tfilter: {\n              id: { eq: $id }\n            }\n            set: {\n                name: $title,\n                bio: $description,\n            }\n        ) {\n            records {\n                id,\n            }\n        }\n    }\n": types.UpdateArtistsDocument,
    "\n    mutation updateOeuvres(\n        $id: UUID,\n        $title: String,\n        $description: String,\n    ) {\n        updateOeuvresCollection(\n          \tfilter: {\n              id: { eq: $id }\n            }\n            set: {\n                title: $title,\n                description: $description,\n            }\n        ) {\n            records {\n                id,\n            }\n        }\n    }\n": types.UpdateOeuvresDocument,
    "\n    mutation updateGenres(\n        $id: UUID,\n        $title: String,\n        $description: String,\n    ) {\n        updateGenresCollection(\n          \tfilter: {\n              id: { eq: $id }\n            }\n            set: {\n                name: $title,\n                description: $description,\n            }\n        ) {\n            records {\n                id,\n            }\n        }\n    }\n": types.UpdateGenresDocument,
    "\n    query searchOeuvres(\n        $keyword: String!,\n        $limit: Int,\n        $cursor : Cursor\n    ) {\n        oeuvresCollection(\n            orderBy: {\n                id: DescNullsLast\n            }\n            first: $limit\n            after: $cursor\n            filter: { title: { ilike: $keyword } }\n        ) {\n            pageInfo {\n                hasNextPage\n                endCursor\n            }\n            edges {\n                cursor\n                node {\n                    ...OeuvresMinimalInfo\n                }\n            }\n        }\n    }\n": types.SearchOeuvresDocument,
    "\n    query searchUsers(\n        $keyword: String!,\n        $limit: Int,\n        $cursor: Cursor\n    ) {\n        usersCollection(\n            orderBy: {\n                mutableId: DescNullsLast\n            }\n            first: $limit\n            after: $cursor\n            filter: { mutableId: { ilike: $keyword } }\n        ) {\n            pageInfo {\n                hasNextPage\n                endCursor\n            }\n            edges {\n                cursor\n                node {\n                    ...MiniProfileInfo\n                }\n            }\n        }\n    }\n": types.SearchUsersDocument,
    "\n    query searchArtists(\n        $keyword: String!,\n        $limit: Int,\n        $cursor: Cursor\n    ) {\n        artistsCollection(\n            orderBy: {\n                id: DescNullsLast\n            }\n            first: $limit\n            after: $cursor\n            filter: { name: { ilike: $keyword } }\n        ) {\n            pageInfo {\n                hasNextPage\n                endCursor\n            }\n            edges {\n                cursor\n                node {\n                    ...ArtistsMinimalInfo\n                }\n            }\n        }\n    }\n": types.SearchArtistsDocument,
    "\n    query searchGenres(\n        $keyword: String!,\n        $limit: Int,\n        $cursor: Cursor\n    ) {\n        genresCollection(\n            orderBy: {\n                id: DescNullsLast\n            }\n            first: $limit\n            after: $cursor\n            filter: { name: { ilike: $keyword } }\n        ) {\n            pageInfo {\n                hasNextPage\n                endCursor\n            }\n            edges {\n                cursor\n                node {\n                    ...GenresMinimalInfo\n                }\n            }\n        }\n    }\n": types.SearchGenresDocument,
};

/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 *
 *
 * @example
 * ```ts
 * const query = graphql(`query GetUser($id: ID!) { user(id: $id) { name } }`);
 * ```
 *
 * The query argument is unknown!
 * Please regenerate the types.
 */
export function graphql(source: string): unknown;

/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    mutation updateProfile(\n        $nickname: String,\n        $mutableId: String,\n        $description: String,\n    ) {\n        updateUsersCollection(\n            set: {\n                nickname: $nickname,\n                mutableId: $mutableId,\n                description: $description,\n            }\n        ) {\n            records {\n                id,\n                nickname,\n                mutableId,\n                description,\n            }\n        }\n    }\n"): (typeof documents)["\n    mutation updateProfile(\n        $nickname: String,\n        $mutableId: String,\n        $description: String,\n    ) {\n        updateUsersCollection(\n            set: {\n                nickname: $nickname,\n                mutableId: $mutableId,\n                description: $description,\n            }\n        ) {\n            records {\n                id,\n                nickname,\n                mutableId,\n                description,\n            }\n        }\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    fragment ArtistsMinimalInfo on Artists {\n        id\n        name\n        updatedAt\n    }\n"): (typeof documents)["\n    fragment ArtistsMinimalInfo on Artists {\n        id\n        name\n        updatedAt\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    fragment ArtistOeuvresInfo on Artists {\n        oeuvresArtistsCollection(\n            orderBy: {\n                oeuvreId: DescNullsLast\n            }\n            first: $limit\n            after: $cursor\n        ) {\n          \tpageInfo {\n                hasNextPage\n                endCursor\n            }\n            edges {\n                cursor\n                node {\n                    oeuvre {\n                        ...OeuvresMinimalInfo\n                    }\n                }\n            }\n        }\n    }\n"): (typeof documents)["\n    fragment ArtistOeuvresInfo on Artists {\n        oeuvresArtistsCollection(\n            orderBy: {\n                oeuvreId: DescNullsLast\n            }\n            first: $limit\n            after: $cursor\n        ) {\n          \tpageInfo {\n                hasNextPage\n                endCursor\n            }\n            edges {\n                cursor\n                node {\n                    oeuvre {\n                        ...OeuvresMinimalInfo\n                    }\n                }\n            }\n        }\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    fragment ArtistsInfo on Artists {\n        ...ArtistsMinimalInfo\n        ...ArtistOeuvresInfo\n        abstract\n        bio\n    }\n"): (typeof documents)["\n    fragment ArtistsInfo on Artists {\n        ...ArtistsMinimalInfo\n        ...ArtistOeuvresInfo\n        abstract\n        bio\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    query getArtistInfoById(\n        $id: UUID!\n        $limit: Int,\n        $cursor: Cursor        \n    ) {\n        artistsCollection(\n            first: 1,\n            filter: { id: { eq: $id } }\n        ) {\n            edges {\n                node {\n                    ...ArtistsInfo\n                }\n            }\n        }\n    }\n"): (typeof documents)["\n    query getArtistInfoById(\n        $id: UUID!\n        $limit: Int,\n        $cursor: Cursor        \n    ) {\n        artistsCollection(\n            first: 1,\n            filter: { id: { eq: $id } }\n        ) {\n            edges {\n                node {\n                    ...ArtistsInfo\n                }\n            }\n        }\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    fragment GenresMinimalInfo on Genres {\n        id\n        name\n        updatedAt\n    }\n"): (typeof documents)["\n    fragment GenresMinimalInfo on Genres {\n        id\n        name\n        updatedAt\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    fragment GenreOeuvresInfo on Genres {\n        oeuvresGenresCollection(\n            orderBy: {\n                oeuvreId: DescNullsLast\n            }\n            first: $limit\n            after: $cursor\n        ) {\n          \tpageInfo {\n                hasNextPage\n                endCursor\n            }\n            edges {\n                cursor\n                node {\n                    oeuvre {\n                        ...OeuvresMinimalInfo\n                    }\n                }\n            }\n        }\n    }\n"): (typeof documents)["\n    fragment GenreOeuvresInfo on Genres {\n        oeuvresGenresCollection(\n            orderBy: {\n                oeuvreId: DescNullsLast\n            }\n            first: $limit\n            after: $cursor\n        ) {\n          \tpageInfo {\n                hasNextPage\n                endCursor\n            }\n            edges {\n                cursor\n                node {\n                    oeuvre {\n                        ...OeuvresMinimalInfo\n                    }\n                }\n            }\n        }\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    fragment GenresInfo on Genres {\n        ...GenresMinimalInfo,\n        ...GenreOeuvresInfo,\n        abstract\n        description\n    }\n"): (typeof documents)["\n    fragment GenresInfo on Genres {\n        ...GenresMinimalInfo,\n        ...GenreOeuvresInfo,\n        abstract\n        description\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    query getGenreInfoById(\n        $id: UUID!\n        $limit: Int,\n        $cursor: Cursor    \n    ) {\n        genresCollection(\n            first: 1,\n            filter: { id: { eq: $id } }\n        ) {\n            edges {\n                node {\n                    ...GenresInfo\n                }\n            }\n        }\n    }\n"): (typeof documents)["\n    query getGenreInfoById(\n        $id: UUID!\n        $limit: Int,\n        $cursor: Cursor    \n    ) {\n        genresCollection(\n            first: 1,\n            filter: { id: { eq: $id } }\n        ) {\n            edges {\n                node {\n                    ...GenresInfo\n                }\n            }\n        }\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    fragment InventoryInfo on Users {\n        id,\n        ...InventoryShadowsInfo\n        ...InventoryWorleyInfo\n        ...InventoryCosmosInfo\n    }\n"): (typeof documents)["\n    fragment InventoryInfo on Users {\n        id,\n        ...InventoryShadowsInfo\n        ...InventoryWorleyInfo\n        ...InventoryCosmosInfo\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    fragment InventoryShadowsInfo on Users {\n        shadowsCollection(\n            orderBy: {\n                createdAt: DescNullsLast\n            }\n            first: $shadowLimit\n            after: $shadowCursor\n        ) {\n            pageInfo {\n                hasNextPage\n                endCursor\n            }\n            edges {\n                cursor\n                node {\n                    ...ShadowsMinimalInfo\n                }\n            }\n        }\n    }\n"): (typeof documents)["\n    fragment InventoryShadowsInfo on Users {\n        shadowsCollection(\n            orderBy: {\n                createdAt: DescNullsLast\n            }\n            first: $shadowLimit\n            after: $shadowCursor\n        ) {\n            pageInfo {\n                hasNextPage\n                endCursor\n            }\n            edges {\n                cursor\n                node {\n                    ...ShadowsMinimalInfo\n                }\n            }\n        }\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    fragment InventoryWorleyInfo on Users {\n        worleyCollection(\n            orderBy: {\n                createdAt: DescNullsLast\n            }\n            first: $worleyLimit\n            after: $worleyCursor\n        ) {\n            pageInfo {\n                hasNextPage\n                endCursor\n            }\n            edges {\n                cursor\n                node {\n                    ...WorleyMinimalInfo\n                }\n            }\n        }\n    }\n"): (typeof documents)["\n    fragment InventoryWorleyInfo on Users {\n        worleyCollection(\n            orderBy: {\n                createdAt: DescNullsLast\n            }\n            first: $worleyLimit\n            after: $worleyCursor\n        ) {\n            pageInfo {\n                hasNextPage\n                endCursor\n            }\n            edges {\n                cursor\n                node {\n                    ...WorleyMinimalInfo\n                }\n            }\n        }\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    fragment InventoryCosmosInfo on Users {\n        cosmosCollection(\n            orderBy: {\n                createdAt: DescNullsLast\n            }\n            first: $cosmosLimit\n            after: $cosmosCursor\n        ) {\n            pageInfo {\n                hasNextPage\n                endCursor\n            }\n            edges {\n                cursor\n                node {\n                    ...CosmosMinimalInfo\n                }\n            }\n        }\n    }\n"): (typeof documents)["\n    fragment InventoryCosmosInfo on Users {\n        cosmosCollection(\n            orderBy: {\n                createdAt: DescNullsLast\n            }\n            first: $cosmosLimit\n            after: $cosmosCursor\n        ) {\n            pageInfo {\n                hasNextPage\n                endCursor\n            }\n            edges {\n                cursor\n                node {\n                    ...CosmosMinimalInfo\n                }\n            }\n        }\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    fragment ShadowsMinimalInfo on Shadows {\n        id,\n        userId\n        name,\n        color\n        bodyLength\n        centeringFactor\n        matchingFactor\n        minDistance\n        avoidFactor\n        turnFactor\n        visualRange\n        speedLimit\n    }\n"): (typeof documents)["\n    fragment ShadowsMinimalInfo on Shadows {\n        id,\n        userId\n        name,\n        color\n        bodyLength\n        centeringFactor\n        matchingFactor\n        minDistance\n        avoidFactor\n        turnFactor\n        visualRange\n        speedLimit\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    fragment CosmosMinimalInfo on Cosmos {\n        id,\n        userId\n        name,\n        shootingStarCount,\n        shootingStarColors,\n        starCount,\n        speedParam,\n        sizeParam\n    }\n"): (typeof documents)["\n    fragment CosmosMinimalInfo on Cosmos {\n        id,\n        userId\n        name,\n        shootingStarCount,\n        shootingStarColors,\n        starCount,\n        speedParam,\n        sizeParam\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    fragment WorleyMinimalInfo on Worley {\n        id,\n        userId\n        name,\n        color,\n        gridCount,\n        limit,\n        movementParam\n    }\n"): (typeof documents)["\n    fragment WorleyMinimalInfo on Worley {\n        id,\n        userId\n        name,\n        color,\n        gridCount,\n        limit,\n        movementParam\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    mutation insertCosmos(\n        $userId: UUID,\n        $name: String,\n        $shootingStarColors: [String]\n        $starCount: Int,\n        $shootingStarCount: Int\n        $speedParam: Float,\n        $sizeParam: Float,\n    ) {\n        insertIntoCosmosCollection(\n            objects: {\n                userId: $userId\n                name: $name\n                shootingStarColors: $shootingStarColors\n                shootingStarCount: $shootingStarCount\n                starCount: $starCount\n                speedParam: $speedParam\n                sizeParam: $sizeParam\n            }\n        ) {\n            records {\n                ...CosmosMinimalInfo\n            }\n        }\n    }\n"): (typeof documents)["\n    mutation insertCosmos(\n        $userId: UUID,\n        $name: String,\n        $shootingStarColors: [String]\n        $starCount: Int,\n        $shootingStarCount: Int\n        $speedParam: Float,\n        $sizeParam: Float,\n    ) {\n        insertIntoCosmosCollection(\n            objects: {\n                userId: $userId\n                name: $name\n                shootingStarColors: $shootingStarColors\n                shootingStarCount: $shootingStarCount\n                starCount: $starCount\n                speedParam: $speedParam\n                sizeParam: $sizeParam\n            }\n        ) {\n            records {\n                ...CosmosMinimalInfo\n            }\n        }\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    mutation deleteCosmos(\n        $id: UUID,\n    ) {\n        deleteFromCosmosCollection(\n            filter: {\n                id: { eq: $id}\n            }\n        ) {\n            records {\n                ...CosmosMinimalInfo\n            }\n        }\n    }\n"): (typeof documents)["\n    mutation deleteCosmos(\n        $id: UUID,\n    ) {\n        deleteFromCosmosCollection(\n            filter: {\n                id: { eq: $id}\n            }\n        ) {\n            records {\n                ...CosmosMinimalInfo\n            }\n        }\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    mutation renameCosmos(\n        $id: UUID,\n        $name: String\n    ) {\n        updateCosmosCollection(\n            filter: {\n                id: { eq: $id}\n            },\n            set: {\n                name: $name\n            }\n        ) {\n            records {\n                ...CosmosMinimalInfo\n            }\n        }\n    }\n"): (typeof documents)["\n    mutation renameCosmos(\n        $id: UUID,\n        $name: String\n    ) {\n        updateCosmosCollection(\n            filter: {\n                id: { eq: $id}\n            },\n            set: {\n                name: $name\n            }\n        ) {\n            records {\n                ...CosmosMinimalInfo\n            }\n        }\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    mutation insertShadows(\n        $userId: UUID,\n        $name: String,\n        $color: String\n        $bodyLength: Float,\n        $centeringFactor: Float,\n        $matchingFactor: Float,\n        $minDistance: Float,\n        $avoidFactor: Float,\n        $turnFactor: Float,\n        $visualRange: Float,\n        $speedLimit: Float\n    ) {\n        insertIntoShadowsCollection(\n            objects: {\n                userId: $userId\n                name: $name\n                color: $color\n                bodyLength: $bodyLength\n                centeringFactor: $centeringFactor\n                matchingFactor: $matchingFactor\n                minDistance: $minDistance\n                avoidFactor: $avoidFactor\n                turnFactor: $turnFactor\n                visualRange: $visualRange\n                speedLimit: $speedLimit\n            }\n        ) {\n            records {\n                ...ShadowsMinimalInfo\n            }\n        }\n    }\n"): (typeof documents)["\n    mutation insertShadows(\n        $userId: UUID,\n        $name: String,\n        $color: String\n        $bodyLength: Float,\n        $centeringFactor: Float,\n        $matchingFactor: Float,\n        $minDistance: Float,\n        $avoidFactor: Float,\n        $turnFactor: Float,\n        $visualRange: Float,\n        $speedLimit: Float\n    ) {\n        insertIntoShadowsCollection(\n            objects: {\n                userId: $userId\n                name: $name\n                color: $color\n                bodyLength: $bodyLength\n                centeringFactor: $centeringFactor\n                matchingFactor: $matchingFactor\n                minDistance: $minDistance\n                avoidFactor: $avoidFactor\n                turnFactor: $turnFactor\n                visualRange: $visualRange\n                speedLimit: $speedLimit\n            }\n        ) {\n            records {\n                ...ShadowsMinimalInfo\n            }\n        }\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    mutation deleteShadows(\n        $id: UUID,\n    ) {\n        deleteFromShadowsCollection(\n            filter: {\n                id: { eq: $id}\n            }\n        ) {\n            records {\n                ...ShadowsMinimalInfo\n            }\n        }\n    }\n"): (typeof documents)["\n    mutation deleteShadows(\n        $id: UUID,\n    ) {\n        deleteFromShadowsCollection(\n            filter: {\n                id: { eq: $id}\n            }\n        ) {\n            records {\n                ...ShadowsMinimalInfo\n            }\n        }\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    mutation renameShadows(\n        $id: UUID,\n        $name: String\n    ) {\n        updateShadowsCollection(\n            filter: {\n                id: { eq: $id}\n            },\n            set: {\n                name: $name\n            }\n        ) {\n            records {\n                ...ShadowsMinimalInfo\n            }\n        }\n    }\n"): (typeof documents)["\n    mutation renameShadows(\n        $id: UUID,\n        $name: String\n    ) {\n        updateShadowsCollection(\n            filter: {\n                id: { eq: $id}\n            },\n            set: {\n                name: $name\n            }\n        ) {\n            records {\n                ...ShadowsMinimalInfo\n            }\n        }\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    mutation insertWorley(\n        $userId: UUID,\n        $name: String,\n        $color: String\n        $gridCount: Int,\n        $movementParam: Float,\n        $limit: Int\n    ) {\n        insertIntoWorleyCollection(\n            objects: {\n                userId: $userId\n                name: $name\n                color: $color\n                gridCount: $gridCount,\n                movementParam: $movementParam,\n                limit: $limit\n            }\n        ) {\n            records {\n                ...WorleyMinimalInfo\n            }\n        }\n    }\n"): (typeof documents)["\n    mutation insertWorley(\n        $userId: UUID,\n        $name: String,\n        $color: String\n        $gridCount: Int,\n        $movementParam: Float,\n        $limit: Int\n    ) {\n        insertIntoWorleyCollection(\n            objects: {\n                userId: $userId\n                name: $name\n                color: $color\n                gridCount: $gridCount,\n                movementParam: $movementParam,\n                limit: $limit\n            }\n        ) {\n            records {\n                ...WorleyMinimalInfo\n            }\n        }\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    mutation deleteWorley(\n        $id: UUID,\n    ) {\n        deleteFromWorleyCollection(\n            filter: {\n                id: { eq: $id}\n            }\n        ) {\n            records {\n                ...WorleyMinimalInfo\n            }\n        }\n    }\n"): (typeof documents)["\n    mutation deleteWorley(\n        $id: UUID,\n    ) {\n        deleteFromWorleyCollection(\n            filter: {\n                id: { eq: $id}\n            }\n        ) {\n            records {\n                ...WorleyMinimalInfo\n            }\n        }\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    mutation renameWorley(\n        $id: UUID,\n        $name: String\n    ) {\n        updateWorleyCollection(\n            filter: {\n                id: { eq: $id}\n            },\n            set: {\n                name: $name\n            }\n        ) {\n            records {\n                ...WorleyMinimalInfo\n            }\n        }\n    }\n"): (typeof documents)["\n    mutation renameWorley(\n        $id: UUID,\n        $name: String\n    ) {\n        updateWorleyCollection(\n            filter: {\n                id: { eq: $id}\n            },\n            set: {\n                name: $name\n            }\n        ) {\n            records {\n                ...WorleyMinimalInfo\n            }\n        }\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    query getUserInventoryById(\n        $id: UUID!\n        $shadowLimit: Int,\n        $shadowCursor: Cursor\n        $cosmosLimit: Int,\n        $cosmosCursor: Cursor\n        $worleyLimit: Int,\n        $worleyCursor: Cursor\n    ) {\n        usersCollection(\n            first: 1\n            filter: { \n                id: { eq: $id },\n            }\n        ) {\n            edges {\n                node {\n                    ...InventoryInfo\n                }\n            }\n        }\n    }\n"): (typeof documents)["\n    query getUserInventoryById(\n        $id: UUID!\n        $shadowLimit: Int,\n        $shadowCursor: Cursor\n        $cosmosLimit: Int,\n        $cosmosCursor: Cursor\n        $worleyLimit: Int,\n        $worleyCursor: Cursor\n    ) {\n        usersCollection(\n            first: 1\n            filter: { \n                id: { eq: $id },\n            }\n        ) {\n            edges {\n                node {\n                    ...InventoryInfo\n                }\n            }\n        }\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    fragment OeuvresMinimalInfo on Oeuvres {\n        id\n        title\n        updatedAt\n    }\n"): (typeof documents)["\n    fragment OeuvresMinimalInfo on Oeuvres {\n        id\n        title\n        updatedAt\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n      fragment OeuvrePentagramsInfo on Oeuvres {\n        pentagramNodesCollection(\n            orderBy: {\n                createdAt: DescNullsLast\n            }\n            first: $limit\n            after: $cursor\n        ) {\n          \tpageInfo {\n                hasNextPage\n                endCursor\n            }\n            edges {\n              \tcursor\n                node {\n                    pentagram {\n                        ...PentagramsSelectInfo\n                    }\n                }\n            }\n        }\n    }\n"): (typeof documents)["\n      fragment OeuvrePentagramsInfo on Oeuvres {\n        pentagramNodesCollection(\n            orderBy: {\n                createdAt: DescNullsLast\n            }\n            first: $limit\n            after: $cursor\n        ) {\n          \tpageInfo {\n                hasNextPage\n                endCursor\n            }\n            edges {\n              \tcursor\n                node {\n                    pentagram {\n                        ...PentagramsSelectInfo\n                    }\n                }\n            }\n        }\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    fragment OeuvresInfo on Oeuvres {\n        ...OeuvresMinimalInfo\n        ...OeuvrePentagramsInfo\n        description\n        oeuvresArtistsCollection {\n            edges {\n                node {\n                    artist {\n                        ...ArtistsMinimalInfo\n                    }\n                }\n            }\n        },\n        oeuvresGenresCollection {\n            edges {\n                node {\n                    genre {\n                        ...GenresMinimalInfo\n                    }\n                }\n            }\n        }\n    }\n"): (typeof documents)["\n    fragment OeuvresInfo on Oeuvres {\n        ...OeuvresMinimalInfo\n        ...OeuvrePentagramsInfo\n        description\n        oeuvresArtistsCollection {\n            edges {\n                node {\n                    artist {\n                        ...ArtistsMinimalInfo\n                    }\n                }\n            }\n        },\n        oeuvresGenresCollection {\n            edges {\n                node {\n                    genre {\n                        ...GenresMinimalInfo\n                    }\n                }\n            }\n        }\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    query getOeuvreInfoById(\n        $id: UUID!\n        $limit: Int,\n        $cursor: Cursor\n    ) {\n        oeuvresCollection(\n            first: 1,\n            filter: { id: { eq: $id } }\n        ) {\n            edges {\n                node {\n                    ...OeuvresInfo\n                }\n            }\n        }\n    }\n"): (typeof documents)["\n    query getOeuvreInfoById(\n        $id: UUID!\n        $limit: Int,\n        $cursor: Cursor\n    ) {\n        oeuvresCollection(\n            first: 1,\n            filter: { id: { eq: $id } }\n        ) {\n            edges {\n                node {\n                    ...OeuvresInfo\n                }\n            }\n        }\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    fragment UpdateRecordInfo on PentagramRevisionUpdateRecords {\n        id\n        pentagramNode {\n            oeuvre {\n                ...OeuvresMinimalInfo\n            }\n        }\n        revision {\n            createdAt\n        }\n        currentAngle\n        currentDistance\n        previousAngle\n        previousDistance\n    }\n"): (typeof documents)["\n    fragment UpdateRecordInfo on PentagramRevisionUpdateRecords {\n        id\n        pentagramNode {\n            oeuvre {\n                ...OeuvresMinimalInfo\n            }\n        }\n        revision {\n            createdAt\n        }\n        currentAngle\n        currentDistance\n        previousAngle\n        previousDistance\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    fragment UpsertRecordInfo on PentagramRevisionUpsertRecords {\n        id\n        pentagramNode {\n            oeuvre {\n                ...OeuvresMinimalInfo\n            }\n        }\n        revision {\n            createdAt\n        }\n        currentAngle\n        currentDistance\n    }\n"): (typeof documents)["\n    fragment UpsertRecordInfo on PentagramRevisionUpsertRecords {\n        id\n        pentagramNode {\n            oeuvre {\n                ...OeuvresMinimalInfo\n            }\n        }\n        revision {\n            createdAt\n        }\n        currentAngle\n        currentDistance\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "  \n    fragment RemoveRecordInfo on PentagramRevisionRemoveRecords {\n        id\n        pentagramNode {\n            oeuvre {\n                ...OeuvresMinimalInfo\n            }\n        }\n        revision {\n            createdAt\n        }\n        previousAngle\n        previousDistance\n    }\n"): (typeof documents)["  \n    fragment RemoveRecordInfo on PentagramRevisionRemoveRecords {\n        id\n        pentagramNode {\n            oeuvre {\n                ...OeuvresMinimalInfo\n            }\n        }\n        revision {\n            createdAt\n        }\n        previousAngle\n        previousDistance\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    fragment RecoverRecordInfo on PentagramRevisionRecoverRecords {\n        id\n        pentagramNode {\n            oeuvre {\n                ...OeuvresMinimalInfo\n            }\n        }\n        revision {\n            createdAt\n        }\n        currentAngle\n        currentDistance\n    }\n"): (typeof documents)["\n    fragment RecoverRecordInfo on PentagramRevisionRecoverRecords {\n        id\n        pentagramNode {\n            oeuvre {\n                ...OeuvresMinimalInfo\n            }\n        }\n        revision {\n            createdAt\n        }\n        currentAngle\n        currentDistance\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    fragment PentagramNodesInfo on PentagramNodes {\n        id\n        oeuvre {\n            ...OeuvresMinimalInfo\n        }\n        pentagramRevisionUpdateRecordsCollection {\n            edges {\n                node {\n                    ...UpdateRecordInfo\n                }\n            }\n        }\n        pentagramRevisionUpsertRecordsCollection {\n            edges {\n                node {\n                    ...UpsertRecordInfo\n                }\n            }\n        }\n        pentagramRevisionRemoveRecordsCollection {\n            edges {\n                node {\n                    ...RemoveRecordInfo\n                }\n            }\n        }\n        pentagramRevisionRecoverRecordsCollection {\n            edges {\n                node {\n                    ...RecoverRecordInfo\n                }\n            }\n        }\n    }\n"): (typeof documents)["\n    fragment PentagramNodesInfo on PentagramNodes {\n        id\n        oeuvre {\n            ...OeuvresMinimalInfo\n        }\n        pentagramRevisionUpdateRecordsCollection {\n            edges {\n                node {\n                    ...UpdateRecordInfo\n                }\n            }\n        }\n        pentagramRevisionUpsertRecordsCollection {\n            edges {\n                node {\n                    ...UpsertRecordInfo\n                }\n            }\n        }\n        pentagramRevisionRemoveRecordsCollection {\n            edges {\n                node {\n                    ...RemoveRecordInfo\n                }\n            }\n        }\n        pentagramRevisionRecoverRecordsCollection {\n            edges {\n                node {\n                    ...RecoverRecordInfo\n                }\n            }\n        }\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    fragment PentagramsUpdateInfo on Pentagrams {\n        id\n        description\n        createdAt\n        user {\n            ...MiniProfileInfo\n        }\n        pentagramNodesCollection {\n            edges {\n                node {\n                    ...PentagramNodesInfo\n                }\n            }\n        }\n    }\n"): (typeof documents)["\n    fragment PentagramsUpdateInfo on Pentagrams {\n        id\n        description\n        createdAt\n        user {\n            ...MiniProfileInfo\n        }\n        pentagramNodesCollection {\n            edges {\n                node {\n                    ...PentagramNodesInfo\n                }\n            }\n        }\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    fragment PentagramsSelectInfo on Pentagrams {\n        id\n        description\n        createdAt\n        user {\n            ...MiniProfileInfo\n        }\n        pentagramNodesCollection {\n            edges {\n                node {\n                    ...PentagramNodesInfo\n                }\n            }\n        }\n        pentagramRevisionsCollection(\n            orderBy: { createdAt: DescNullsLast }\n        ) {\n            edges {\n                node {\n                    ...PentagramRevisionsMinimalInfo\n                }\n            }\n        }\n    }\n"): (typeof documents)["\n    fragment PentagramsSelectInfo on Pentagrams {\n        id\n        description\n        createdAt\n        user {\n            ...MiniProfileInfo\n        }\n        pentagramNodesCollection {\n            edges {\n                node {\n                    ...PentagramNodesInfo\n                }\n            }\n        }\n        pentagramRevisionsCollection(\n            orderBy: { createdAt: DescNullsLast }\n        ) {\n            edges {\n                node {\n                    ...PentagramRevisionsMinimalInfo\n                }\n            }\n        }\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    fragment PentagramsSelectUserInfo on Pentagrams {\n        id\n        user {\n            ...MiniProfileInfo\n        }\n    }\n"): (typeof documents)["\n    fragment PentagramsSelectUserInfo on Pentagrams {\n        id\n        user {\n            ...MiniProfileInfo\n        }\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    fragment PentagramRevisionsInfo on PentagramRevisions {\n        id\n        createdAt\n        pentagram {\n            id\n        }\n        pentagramRevisionUpdateRecordsCollection {\n            totalCount\n            edges {\n                node {\n                    ...UpdateRecordInfo\n                }\n            }\n        }\n        pentagramRevisionUpsertRecordsCollection {\n            totalCount\n            edges {\n                node {\n                    ...UpsertRecordInfo\n                }\n            }\n        }\n        pentagramRevisionRemoveRecordsCollection {\n            totalCount\n            edges {\n                node {\n                    ...RemoveRecordInfo\n                }\n            }\n        }\n        pentagramRevisionRecoverRecordsCollection {\n            totalCount\n            edges {\n                node {\n                    ...RecoverRecordInfo\n                }\n            }\n        }\n    }\n"): (typeof documents)["\n    fragment PentagramRevisionsInfo on PentagramRevisions {\n        id\n        createdAt\n        pentagram {\n            id\n        }\n        pentagramRevisionUpdateRecordsCollection {\n            totalCount\n            edges {\n                node {\n                    ...UpdateRecordInfo\n                }\n            }\n        }\n        pentagramRevisionUpsertRecordsCollection {\n            totalCount\n            edges {\n                node {\n                    ...UpsertRecordInfo\n                }\n            }\n        }\n        pentagramRevisionRemoveRecordsCollection {\n            totalCount\n            edges {\n                node {\n                    ...RemoveRecordInfo\n                }\n            }\n        }\n        pentagramRevisionRecoverRecordsCollection {\n            totalCount\n            edges {\n                node {\n                    ...RecoverRecordInfo\n                }\n            }\n        }\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    fragment PentagramRevisionsMinimalInfo on PentagramRevisions {\n        id\n        createdAt\n        pentagram {\n            id\n        }\n        pentagramRevisionUpdateRecordsCollection {\n            totalCount\n        }\n        pentagramRevisionUpsertRecordsCollection {\n            totalCount\n        }\n        pentagramRevisionRemoveRecordsCollection {\n            totalCount\n        }\n        pentagramRevisionRecoverRecordsCollection {\n            totalCount\n        }\n    }\n"): (typeof documents)["\n    fragment PentagramRevisionsMinimalInfo on PentagramRevisions {\n        id\n        createdAt\n        pentagram {\n            id\n        }\n        pentagramRevisionUpdateRecordsCollection {\n            totalCount\n        }\n        pentagramRevisionUpsertRecordsCollection {\n            totalCount\n        }\n        pentagramRevisionRemoveRecordsCollection {\n            totalCount\n        }\n        pentagramRevisionRecoverRecordsCollection {\n            totalCount\n        }\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    fragment PentagramRevisionFeedInfo on PentagramRevisions {\n        id\n        createdAt\n        user {\n            ...MiniProfileInfo\n        }\n        pentagram {\n            ...PentagramsSelectInfo\n        }\n    }\n"): (typeof documents)["\n    fragment PentagramRevisionFeedInfo on PentagramRevisions {\n        id\n        createdAt\n        user {\n            ...MiniProfileInfo\n        }\n        pentagram {\n            ...PentagramsSelectInfo\n        }\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    mutation deletePentagram(\n        $id: UUID,\n    ) {\n        deleteFromPentagramsCollection(\n            filter: {\n                id: { eq: $id }\n            }\n        ) {\n            records {\n                id,\n            }\n        }\n    }\n"): (typeof documents)["\n    mutation deletePentagram(\n        $id: UUID,\n    ) {\n        deleteFromPentagramsCollection(\n            filter: {\n                id: { eq: $id }\n            }\n        ) {\n            records {\n                id,\n            }\n        }\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    query getPentagramUpdateInfoById($id: UUID!) {\n        pentagramsCollection(\n            filter: { id: { eq: $id } }\n        ) {\n            edges {\n                node {\n                    ...PentagramsUpdateInfo\n                }\n            }\n        }\n    }\n"): (typeof documents)["\n    query getPentagramUpdateInfoById($id: UUID!) {\n        pentagramsCollection(\n            filter: { id: { eq: $id } }\n        ) {\n            edges {\n                node {\n                    ...PentagramsUpdateInfo\n                }\n            }\n        }\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    query getPentagramSelectInfoById($id: UUID!) {\n        pentagramsCollection(\n            filter: { id: { eq: $id } }\n        ) {\n            edges {\n                node {\n                    ...PentagramsSelectInfo\n                }\n            }\n        }\n    }\n"): (typeof documents)["\n    query getPentagramSelectInfoById($id: UUID!) {\n        pentagramsCollection(\n            filter: { id: { eq: $id } }\n        ) {\n            edges {\n                node {\n                    ...PentagramsSelectInfo\n                }\n            }\n        }\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    query getPentagramsSelectUserInfoById($id: UUID!) {\n        pentagramsCollection(\n            filter: { id: { eq: $id } }\n        ) {\n            edges {\n                node {\n                    ...PentagramsSelectUserInfo\n                }\n            }\n        }\n    }\n"): (typeof documents)["\n    query getPentagramsSelectUserInfoById($id: UUID!) {\n        pentagramsCollection(\n            filter: { id: { eq: $id } }\n        ) {\n            edges {\n                node {\n                    ...PentagramsSelectUserInfo\n                }\n            }\n        }\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    query getPentagramNodesInfoById($id: UUID!) {\n        pentagramNodesCollection(\n            filter: { id: { eq: $id } }\n        ) {\n            edges {\n                node {\n                    ...PentagramNodesInfo\n                }\n            }\n        }\n    }\n"): (typeof documents)["\n    query getPentagramNodesInfoById($id: UUID!) {\n        pentagramNodesCollection(\n            filter: { id: { eq: $id } }\n        ) {\n            edges {\n                node {\n                    ...PentagramNodesInfo\n                }\n            }\n        }\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    query getPentagramRevisionsInfoById($id: UUID!) {\n        pentagramRevisionsCollection(\n            filter: { id: { eq: $id } }\n        ) {\n            edges {\n                node {\n                    ...PentagramRevisionsInfo\n                }\n            }\n        }\n    }\n"): (typeof documents)["\n    query getPentagramRevisionsInfoById($id: UUID!) {\n        pentagramRevisionsCollection(\n            filter: { id: { eq: $id } }\n        ) {\n            edges {\n                node {\n                    ...PentagramRevisionsInfo\n                }\n            }\n        }\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    fragment MiniProfileInfo on Users {\n        mutableId,\n        nickname,\n        id,\n        updatedAt\n    }\n"): (typeof documents)["\n    fragment MiniProfileInfo on Users {\n        mutableId,\n        nickname,\n        id,\n        updatedAt\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    fragment ProfilesInfo on Users {\n        ...MiniProfileInfo,\n        description,\n        nickname,\n        ...ProfileFollowInfo,\n        ...ProfilePentagramInfo,\n        ...ProfileRevisionInfo\n    }\n"): (typeof documents)["\n    fragment ProfilesInfo on Users {\n        ...MiniProfileInfo,\n        description,\n        nickname,\n        ...ProfileFollowInfo,\n        ...ProfilePentagramInfo,\n        ...ProfileRevisionInfo\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    fragment ProfileFollowInfo on Users {\n        followingsCollection {\n            edges {\n                node {\n                    following_id {\n                        ...MiniProfileInfo\n                    }\n                }\n            }\n        }\n        followersCollection {\n            edges {\n                node {\n                    follower_id {\n                        ...MiniProfileInfo\n                    }\n                }\n            }\n        }\n    }\n"): (typeof documents)["\n    fragment ProfileFollowInfo on Users {\n        followingsCollection {\n            edges {\n                node {\n                    following_id {\n                        ...MiniProfileInfo\n                    }\n                }\n            }\n        }\n        followersCollection {\n            edges {\n                node {\n                    follower_id {\n                        ...MiniProfileInfo\n                    }\n                }\n            }\n        }\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    fragment ProfilePentagramInfo on Users {\n        pentagramsCollection(\n            orderBy: {\n                createdAt: DescNullsLast\n            }\n            first: $pentagramLimit\n            after: $pentagramCursor\n        ) {\n            pageInfo {\n                hasNextPage\n                endCursor\n            }\n            edges {\n                cursor\n                node {\n                    ...PentagramsSelectInfo\n                }\n            }\n        }\n    }\n"): (typeof documents)["\n    fragment ProfilePentagramInfo on Users {\n        pentagramsCollection(\n            orderBy: {\n                createdAt: DescNullsLast\n            }\n            first: $pentagramLimit\n            after: $pentagramCursor\n        ) {\n            pageInfo {\n                hasNextPage\n                endCursor\n            }\n            edges {\n                cursor\n                node {\n                    ...PentagramsSelectInfo\n                }\n            }\n        }\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    fragment ProfileRevisionInfo on Users {\n        pentagramRevisionsCollection(\n            orderBy: {\n                createdAt: DescNullsLast\n            }\n            first: $revisionLimit\n            after: $revisionCursor\n        ) {\n            pageInfo {\n                hasNextPage\n                endCursor\n            }\n            edges {\n                cursor\n                node {\n                    ...PentagramRevisionFeedInfo\n                }\n            }\n        }\n    }\n"): (typeof documents)["\n    fragment ProfileRevisionInfo on Users {\n        pentagramRevisionsCollection(\n            orderBy: {\n                createdAt: DescNullsLast\n            }\n            first: $revisionLimit\n            after: $revisionCursor\n        ) {\n            pageInfo {\n                hasNextPage\n                endCursor\n            }\n            edges {\n                cursor\n                node {\n                    ...PentagramRevisionFeedInfo\n                }\n            }\n        }\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    mutation insertFollowings($followerId:UUID!, $followingId:UUID!) {\n        insertIntoFollowingsCollection(\n            objects: {\n                followerId: $followerId,\n                followingId: $followingId\n            }\n        ) {\n            records{\n                followerId,\n                followingId\n            }\n        }\n    }\n"): (typeof documents)["\n    mutation insertFollowings($followerId:UUID!, $followingId:UUID!) {\n        insertIntoFollowingsCollection(\n            objects: {\n                followerId: $followerId,\n                followingId: $followingId\n            }\n        ) {\n            records{\n                followerId,\n                followingId\n            }\n        }\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    mutation deleteFollowings($followerId:UUID!, $followingId:UUID!) {\n        deleteFromFollowingsCollection(\n            filter : {\n                followingId: {eq: $followingId },\n                followerId: {eq: $followerId}\n            }\n        ) {\n            records {\n                followerId,\n                followingId\n            }\n        }\n    }\n"): (typeof documents)["\n    mutation deleteFollowings($followerId:UUID!, $followingId:UUID!) {\n        deleteFromFollowingsCollection(\n            filter : {\n                followingId: {eq: $followingId },\n                followerId: {eq: $followerId}\n            }\n        ) {\n            records {\n                followerId,\n                followingId\n            }\n        }\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    query getUserByMutableId(\n        $mutableId: String!\n        $pentagramLimit: Int,\n        $pentagramCursor: Cursor\n        $revisionLimit: Int,\n        $revisionCursor: Cursor\n    ) {\n        usersCollection  (\n            first: 1\n            filter: { mutableId: { eq: $mutableId } }\n        ) {\n            edges {\n                node {\n                    ...ProfilesInfo\n                }\n            }\n        }\n    }\n"): (typeof documents)["\n    query getUserByMutableId(\n        $mutableId: String!\n        $pentagramLimit: Int,\n        $pentagramCursor: Cursor\n        $revisionLimit: Int,\n        $revisionCursor: Cursor\n    ) {\n        usersCollection  (\n            first: 1\n            filter: { mutableId: { eq: $mutableId } }\n        ) {\n            edges {\n                node {\n                    ...ProfilesInfo\n                }\n            }\n        }\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    fragment AuthInfo on Users {\n        ...MiniProfileInfo,\n        description,\n        nickname,\n        ...ProfileFollowInfo,\n    }\n"): (typeof documents)["\n    fragment AuthInfo on Users {\n        ...MiniProfileInfo,\n        description,\n        nickname,\n        ...ProfileFollowInfo,\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    query GetUserById($id: UUID!) {\n        usersCollection(\n            filter: { id: {eq: $id } }\n            first: 1    \n        ) {\n            edges {\n                node {\n                    ...AuthInfo\n                }\n            }\n        }\n    }\n"): (typeof documents)["\n    query GetUserById($id: UUID!) {\n        usersCollection(\n            filter: { id: {eq: $id } }\n            first: 1    \n        ) {\n            edges {\n                node {\n                    ...AuthInfo\n                }\n            }\n        }\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    fragment FeedInfo on Feed {\n        items (\n            orderBy: {\n                createdAt: DescNullsLast\n            }\n            first: $limit\n            after: $cursor\n        ) {\n            pageInfo {\n                hasNextPage\n                endCursor\n            }\n            edges {\n              \tcursor\n                node {\n                    ...PentagramRevisionFeedInfo\n                }\n            }\n        }\n    }\n"): (typeof documents)["\n    fragment FeedInfo on Feed {\n        items (\n            orderBy: {\n                createdAt: DescNullsLast\n            }\n            first: $limit\n            after: $cursor\n        ) {\n            pageInfo {\n                hasNextPage\n                endCursor\n            }\n            edges {\n              \tcursor\n                node {\n                    ...PentagramRevisionFeedInfo\n                }\n            }\n        }\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    fragment FollowRecommendationInfo on Feed {\n        recommendation {\n            edges {\n                node {\n                    ...MiniProfileInfo\n                }\n            }\n        }\n    }\n"): (typeof documents)["\n    fragment FollowRecommendationInfo on Feed {\n        recommendation {\n            edges {\n                node {\n                    ...MiniProfileInfo\n                }\n            }\n        }\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    query GetFeedById(\n        $id: UUID!,\n        $limit: Int,\n        $cursor: Cursor\n    ) {\n        feedCollection(filter: { id: {eq: $id } }) {\n            edges {\n                node {\n                    id,\n                    ...FeedInfo\n                }\n            }\n        }\n    }\n"): (typeof documents)["\n    query GetFeedById(\n        $id: UUID!,\n        $limit: Int,\n        $cursor: Cursor\n    ) {\n        feedCollection(filter: { id: {eq: $id } }) {\n            edges {\n                node {\n                    id,\n                    ...FeedInfo\n                }\n            }\n        }\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    query GetFollowRecommendation($id: UUID!) {\n        feedCollection(filter: { id: {eq: $id } }) {\n            edges {\n                node {\n                    ...FollowRecommendationInfo\n                }\n            }\n        }\n    }\n"): (typeof documents)["\n    query GetFollowRecommendation($id: UUID!) {\n        feedCollection(filter: { id: {eq: $id } }) {\n            edges {\n                node {\n                    ...FollowRecommendationInfo\n                }\n            }\n        }\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    mutation insertArtists(\n        $title: String,\n        $description: String,\n    ) {\n        insertIntoArtistsCollection(\n            objects: {\n                name: $title,\n                bio: $description,\n            }\n        ) {\n            records {\n                id,\n            }\n        }\n    }\n"): (typeof documents)["\n    mutation insertArtists(\n        $title: String,\n        $description: String,\n    ) {\n        insertIntoArtistsCollection(\n            objects: {\n                name: $title,\n                bio: $description,\n            }\n        ) {\n            records {\n                id,\n            }\n        }\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    mutation insertOeuvres(\n        $title: String,\n        $description: String,\n    ) {\n        insertIntoOeuvresCollection(\n            objects: {\n                title: $title,\n                description: $description,\n            }\n        ) {\n            records {\n                id,\n            }\n        }\n    }\n"): (typeof documents)["\n    mutation insertOeuvres(\n        $title: String,\n        $description: String,\n    ) {\n        insertIntoOeuvresCollection(\n            objects: {\n                title: $title,\n                description: $description,\n            }\n        ) {\n            records {\n                id,\n            }\n        }\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    mutation insertGenres(\n        $title: String,\n        $description: String,\n    ) {\n        insertIntoGenresCollection(\n            objects: {\n                name: $title,\n                description: $description\n            }\n        ) {\n            records {\n                id,\n            }\n        }\n    }\n"): (typeof documents)["\n    mutation insertGenres(\n        $title: String,\n        $description: String,\n    ) {\n        insertIntoGenresCollection(\n            objects: {\n                name: $title,\n                description: $description\n            }\n        ) {\n            records {\n                id,\n            }\n        }\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    mutation insertOeuvresArtistsRelation(\n        $metaId: UUID,\n        $oeuvreId: UUID,\n    ) {\n        insertIntoOeuvresArtistsCollection(\n            objects: {\n                oeuvreId: $oeuvreId,\n                artistId: $metaId,\n            }\n        ) {\n            records {\n                oeuvreId\n            }\n        }\n    }\n"): (typeof documents)["\n    mutation insertOeuvresArtistsRelation(\n        $metaId: UUID,\n        $oeuvreId: UUID,\n    ) {\n        insertIntoOeuvresArtistsCollection(\n            objects: {\n                oeuvreId: $oeuvreId,\n                artistId: $metaId,\n            }\n        ) {\n            records {\n                oeuvreId\n            }\n        }\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    mutation insertOeuvresGenresRelation(\n        $metaId: UUID,\n        $oeuvreId: UUID,\n    ) {\n        insertIntoOeuvresGenresCollection(\n            objects: {\n                oeuvreId: $oeuvreId,\n                genreId: $metaId,\n            }\n        ) {\n            records {\n                oeuvreId\n            }\n        }\n    }\n"): (typeof documents)["\n    mutation insertOeuvresGenresRelation(\n        $metaId: UUID,\n        $oeuvreId: UUID,\n    ) {\n        insertIntoOeuvresGenresCollection(\n            objects: {\n                oeuvreId: $oeuvreId,\n                genreId: $metaId,\n            }\n        ) {\n            records {\n                oeuvreId\n            }\n        }\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    mutation deleteOeuvresArtistsRelation(\n        $metaId: UUID,\n        $oeuvreId: UUID,\n    ) {\n        deleteFromOeuvresArtistsCollection(\n            filter: {\n                oeuvreId: { eq: $oeuvreId },\n                artistId: { eq: $metaId },\n            }\n        ) {\n            records {\n                oeuvreId\n            }\n        }\n    }\n"): (typeof documents)["\n    mutation deleteOeuvresArtistsRelation(\n        $metaId: UUID,\n        $oeuvreId: UUID,\n    ) {\n        deleteFromOeuvresArtistsCollection(\n            filter: {\n                oeuvreId: { eq: $oeuvreId },\n                artistId: { eq: $metaId },\n            }\n        ) {\n            records {\n                oeuvreId\n            }\n        }\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    mutation deleteOeuvresGenresRelation(\n        $metaId: UUID,\n        $oeuvreId: UUID,\n    ) {\n        deleteFromOeuvresGenresCollection(\n            filter: {\n                oeuvreId: { eq: $oeuvreId },\n                genreId: { eq: $metaId },\n            }\n        ) {\n            records {\n                oeuvreId\n            }\n        }\n    }\n"): (typeof documents)["\n    mutation deleteOeuvresGenresRelation(\n        $metaId: UUID,\n        $oeuvreId: UUID,\n    ) {\n        deleteFromOeuvresGenresCollection(\n            filter: {\n                oeuvreId: { eq: $oeuvreId },\n                genreId: { eq: $metaId },\n            }\n        ) {\n            records {\n                oeuvreId\n            }\n        }\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    mutation updateArtists(\n        $id: UUID,\n        $title: String,\n        $description: String,\n    ) {\n        updateArtistsCollection(\n          \tfilter: {\n              id: { eq: $id }\n            }\n            set: {\n                name: $title,\n                bio: $description,\n            }\n        ) {\n            records {\n                id,\n            }\n        }\n    }\n"): (typeof documents)["\n    mutation updateArtists(\n        $id: UUID,\n        $title: String,\n        $description: String,\n    ) {\n        updateArtistsCollection(\n          \tfilter: {\n              id: { eq: $id }\n            }\n            set: {\n                name: $title,\n                bio: $description,\n            }\n        ) {\n            records {\n                id,\n            }\n        }\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    mutation updateOeuvres(\n        $id: UUID,\n        $title: String,\n        $description: String,\n    ) {\n        updateOeuvresCollection(\n          \tfilter: {\n              id: { eq: $id }\n            }\n            set: {\n                title: $title,\n                description: $description,\n            }\n        ) {\n            records {\n                id,\n            }\n        }\n    }\n"): (typeof documents)["\n    mutation updateOeuvres(\n        $id: UUID,\n        $title: String,\n        $description: String,\n    ) {\n        updateOeuvresCollection(\n          \tfilter: {\n              id: { eq: $id }\n            }\n            set: {\n                title: $title,\n                description: $description,\n            }\n        ) {\n            records {\n                id,\n            }\n        }\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    mutation updateGenres(\n        $id: UUID,\n        $title: String,\n        $description: String,\n    ) {\n        updateGenresCollection(\n          \tfilter: {\n              id: { eq: $id }\n            }\n            set: {\n                name: $title,\n                description: $description,\n            }\n        ) {\n            records {\n                id,\n            }\n        }\n    }\n"): (typeof documents)["\n    mutation updateGenres(\n        $id: UUID,\n        $title: String,\n        $description: String,\n    ) {\n        updateGenresCollection(\n          \tfilter: {\n              id: { eq: $id }\n            }\n            set: {\n                name: $title,\n                description: $description,\n            }\n        ) {\n            records {\n                id,\n            }\n        }\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    query searchOeuvres(\n        $keyword: String!,\n        $limit: Int,\n        $cursor : Cursor\n    ) {\n        oeuvresCollection(\n            orderBy: {\n                id: DescNullsLast\n            }\n            first: $limit\n            after: $cursor\n            filter: { title: { ilike: $keyword } }\n        ) {\n            pageInfo {\n                hasNextPage\n                endCursor\n            }\n            edges {\n                cursor\n                node {\n                    ...OeuvresMinimalInfo\n                }\n            }\n        }\n    }\n"): (typeof documents)["\n    query searchOeuvres(\n        $keyword: String!,\n        $limit: Int,\n        $cursor : Cursor\n    ) {\n        oeuvresCollection(\n            orderBy: {\n                id: DescNullsLast\n            }\n            first: $limit\n            after: $cursor\n            filter: { title: { ilike: $keyword } }\n        ) {\n            pageInfo {\n                hasNextPage\n                endCursor\n            }\n            edges {\n                cursor\n                node {\n                    ...OeuvresMinimalInfo\n                }\n            }\n        }\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    query searchUsers(\n        $keyword: String!,\n        $limit: Int,\n        $cursor: Cursor\n    ) {\n        usersCollection(\n            orderBy: {\n                mutableId: DescNullsLast\n            }\n            first: $limit\n            after: $cursor\n            filter: { mutableId: { ilike: $keyword } }\n        ) {\n            pageInfo {\n                hasNextPage\n                endCursor\n            }\n            edges {\n                cursor\n                node {\n                    ...MiniProfileInfo\n                }\n            }\n        }\n    }\n"): (typeof documents)["\n    query searchUsers(\n        $keyword: String!,\n        $limit: Int,\n        $cursor: Cursor\n    ) {\n        usersCollection(\n            orderBy: {\n                mutableId: DescNullsLast\n            }\n            first: $limit\n            after: $cursor\n            filter: { mutableId: { ilike: $keyword } }\n        ) {\n            pageInfo {\n                hasNextPage\n                endCursor\n            }\n            edges {\n                cursor\n                node {\n                    ...MiniProfileInfo\n                }\n            }\n        }\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    query searchArtists(\n        $keyword: String!,\n        $limit: Int,\n        $cursor: Cursor\n    ) {\n        artistsCollection(\n            orderBy: {\n                id: DescNullsLast\n            }\n            first: $limit\n            after: $cursor\n            filter: { name: { ilike: $keyword } }\n        ) {\n            pageInfo {\n                hasNextPage\n                endCursor\n            }\n            edges {\n                cursor\n                node {\n                    ...ArtistsMinimalInfo\n                }\n            }\n        }\n    }\n"): (typeof documents)["\n    query searchArtists(\n        $keyword: String!,\n        $limit: Int,\n        $cursor: Cursor\n    ) {\n        artistsCollection(\n            orderBy: {\n                id: DescNullsLast\n            }\n            first: $limit\n            after: $cursor\n            filter: { name: { ilike: $keyword } }\n        ) {\n            pageInfo {\n                hasNextPage\n                endCursor\n            }\n            edges {\n                cursor\n                node {\n                    ...ArtistsMinimalInfo\n                }\n            }\n        }\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    query searchGenres(\n        $keyword: String!,\n        $limit: Int,\n        $cursor: Cursor\n    ) {\n        genresCollection(\n            orderBy: {\n                id: DescNullsLast\n            }\n            first: $limit\n            after: $cursor\n            filter: { name: { ilike: $keyword } }\n        ) {\n            pageInfo {\n                hasNextPage\n                endCursor\n            }\n            edges {\n                cursor\n                node {\n                    ...GenresMinimalInfo\n                }\n            }\n        }\n    }\n"): (typeof documents)["\n    query searchGenres(\n        $keyword: String!,\n        $limit: Int,\n        $cursor: Cursor\n    ) {\n        genresCollection(\n            orderBy: {\n                id: DescNullsLast\n            }\n            first: $limit\n            after: $cursor\n            filter: { name: { ilike: $keyword } }\n        ) {\n            pageInfo {\n                hasNextPage\n                endCursor\n            }\n            edges {\n                cursor\n                node {\n                    ...GenresMinimalInfo\n                }\n            }\n        }\n    }\n"];

export function graphql(source: string) {
  return (documents as any)[source] ?? {};
}

export type DocumentType<TDocumentNode extends DocumentNode<any, any>> = TDocumentNode extends DocumentNode<  infer TType,  any>  ? TType  : never;